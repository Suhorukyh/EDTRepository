
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	перем ПользовательИБ;
	перем Роль, Запись;
	перем РежимЗапуска, ПолноеИмяЗначения, ИмяЗначения;
	перем ТолькоПросмотр;
	
	//УчетГазаСервер.НастроитьФормуЭлемента(ЭтаФорма, Отказ);
	
	// заполняем варианты режима запуска для выбора из списка
	
	для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	конеццикла;
	Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// ищем пользователя
	
	УстановитьПривилегированныйРежим(истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(ложь);
	
	// заполняем список ролей
	
	если ПользовательИБ <> неопределено тогда
		// пользователь найден
		
		Пароль = ?(ПользовательИБ.ПарольУстановлен, "********", "");
		ПодтверждениеПароля = Пароль;
		ПользовательИнфБазыАутентификацияOpenID = ПользовательИБ.АутентификацияOpenID;
		ПользовательИнфБазыАутентификацияОС = ПользовательИБ.АутентификацияОС;
		ПользовательИнфБазыАутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
		ПользовательИнфБазыЗапрещеноИзменятьПароль = ПользовательИБ.ЗапрещеноИзменятьПароль;
		ПользовательИнфБазыИмя = ПользовательИБ.Имя;
		ПользовательИнфБазыПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		ПользовательИнфБазыПолноеИмя = ПользовательИБ.ПолноеИмя;
		ПользовательИнфБазыПользовательОС = ПользовательИБ.ПользовательОС;
		ПользовательИнфБазыРежимЗапуска = ПользовательИБ.РежимЗапуска;
		
		для каждого Роль из Метаданные.Роли цикл
			Запись = Роли.Добавить();
			Запись.Имя = Роль.Имя;
			Запись.Наименование = Роль.Синоним;
			Запись.Выбрано = ПользовательИБ.Роли.Содержит(Роль);
			Запись.Скрытая = ЗначениеЗаполнено(Роль.Комментарий);
		конеццикла;
	иначеесли Объект.Ссылка = Справочники.Пользователи.Обмен тогда
		// пользователь обмен - первый вход
		
		Объект.Недействителен = ложь;
		Объект.Служебный = истина;
		ПользовательИнфБазыИмя = Объект.Наименование;
		//ПользовательИнфБазыАутентификацияОС = истина;
		//ПользовательИнфБазыПользовательОС = "\\ENT\svc.prombill.acc";
		ПользовательИнфБазыРежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
		
		для каждого Роль из Метаданные.Роли цикл
			Запись = Роли.Добавить();
			Запись.Имя = Роль.Имя;
			Запись.Наименование = Роль.Синоним;
			Запись.Выбрано = (Роль = Метаданные.Роли.Обмен);
			Запись.Скрытая = ЗначениеЗаполнено(Роль.Комментарий);
		конеццикла;
		
		ЭтаФорма.Модифицированность = истина;
	иначе
		// пользователь новый
		
		ПользовательИнфБазыРежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
		
		для каждого Роль из Метаданные.Роли цикл
			Запись = Роли.Добавить();
			Запись.Имя = Роль.Имя;
			Запись.Наименование = Роль.Синоним;
			//Запись.Выбрано = (Роль = Метаданные.Роли.БазовыеПрава или Роль = Метаданные.Роли.Просмотр);
			//Запись.Скрытая = ЗначениеЗаполнено(Роль.Комментарий);
		конеццикла;
		
		ЭтаФорма.Модифицированность = истина;
	конецесли;
	
	Роли.Сортировать("Наименование");
	
	// ограничения доступа
	
	ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр или не УправлениеПользователямиСервер.ДоступноРедактированиеПользователя(Объект.Ссылка);
	ДоступнаОсновнаяРоль = УправлениеПользователямиПовтИсп.РольДоступнаАдминистраторСистемы();
	
	ЭтаФорма.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Роли.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Служебный.ТолькоПросмотр = не ДоступнаОсновнаяРоль;
	Элементы.СвойстваПользователяИБ.ПодчиненныеЭлементы.ОсновныеСвойства.ПодчиненныеЭлементы.СвойстваАутентификации1СПредприятия.ТолькоПросмотр = не ДоступнаОсновнаяРоль;
	
	Элементы.ПоказыватьОсновныеРоли.Пометка = истина;
	Элементы.ПоказыватьСкрытыеРоли.Видимость = ДоступнаОсновнаяРоль;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	перем ПользовательИБ;
	перем Запись;
	
	УстановитьПривилегированныйРежим(истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(ложь);
	
	если ПользовательИБ = неопределено тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	конецесли;
	
	если ПарольИзменен тогда
		ПользовательИБ.Пароль = Пароль;
	конецесли;
	
	ПользовательИБ.АутентификацияOpenID = ПользовательИнфБазыАутентификацияOpenID;
	ПользовательИБ.АутентификацияОС = ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.АутентификацияСтандартная = ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ЗапрещеноИзменятьПароль = ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.Имя = ПользовательИнфБазыИмя;
	ПользовательИБ.ПоказыватьВСпискеВыбора = ПользовательИнфБазыПоказыватьВСпискеВыбора;
	ПользовательИБ.ПолноеИмя = Объект.Наименование;
	ПользовательИБ.ПользовательОС = ПользовательИнфБазыПользовательОС;
	
	если ЗначениеЗаполнено(ПользовательИнфБазыРежимЗапуска) тогда
		ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ПользовательИнфБазыРежимЗапуска];
	иначе
		ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
	конецесли;
	
	попытка
		ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ложь;
	исключение
		// до версии 8.3.9.2033 нет такого реквизита
	конецпопытки;
	
	ПользовательИБ.Роли.Очистить();
	для каждого Запись из Роли цикл
		если Запись.Выбрано тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Запись.Имя]);
		конецесли;
	конеццикла;
	
	УстановитьПривилегированныйРежим(истина);
	ПользовательИБ.Записать();
	УстановитьПривилегированныйРежим(ложь);
	
	если не Отказ тогда
		ТекущийОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьДоступ();
	ПоказатьРоли();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	если Пароль <> ПодтверждениеПароля тогда
		Предупреждение("Пароли не совпадают");
		Отказ = истина;
		возврат;
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОсновныеРоли(Команда)
	Элементы.ПоказыватьОсновныеРоли.Пометка = не Элементы.ПоказыватьОсновныеРоли.Пометка;
	ПоказатьРоли();
КонецПроцедуры
&НаКлиенте
Процедура ПоказыватьСкрытыеРоли(Команда)
	Элементы.ПоказыватьСкрытыеРоли.Пометка = не Элементы.ПоказыватьСкрытыеРоли.Пометка;
	ПоказатьРоли();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРоли()
	если Элементы.ПоказыватьОсновныеРоли.Пометка и Элементы.ПоказыватьСкрытыеРоли.Пометка тогда
		Элементы.Роли.ОтборСтрок = неопределено;
	иначеесли Элементы.ПоказыватьОсновныеРоли.Пометка тогда
		Элементы.Роли.ОтборСтрок = новый ФиксированнаяСтруктура(новый Структура("Скрытая", ложь));
	иначеесли Элементы.ПоказыватьСкрытыеРоли.Пометка тогда
		Элементы.Роли.ОтборСтрок = новый ФиксированнаяСтруктура(новый Структура("Скрытая", истина));
	иначе
		Элементы.Роли.ОтборСтрок = новый ФиксированнаяСтруктура(новый Структура("Скрытая", 0));
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступ()
	//Элементы.СвойстваПользователяИБ.Доступность = не Объект.Недействителен;
	Элементы.СвойстваПользователяИБ.ТолькоПросмотр = Объект.Недействителен;
	
	Элементы.СвойстваПараметрыАутентификации1СПредприятия.Доступность = ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ИспользоватьИнтерфейсТакси.Доступность = ДоступнаОсновнаяРоль;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеИмяПоПользователюИБ(Команда)
	Объект.Наименование = ПользовательИнфБазыПолноеИмя;
КонецПроцедуры

////////////////////////////////////////

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Объект.Наименование = СокрЛП(Объект.Наименование);
	если не ЗначениеЗаполнено(ПользовательИнфБазыИмя) тогда
		ПользовательИнфБазыИмя = Объект.Наименование;
	конецесли;
КонецПроцедуры
&НаКлиенте
Процедура ПользовательИнфБазыИмяПриИзменении(Элемент)
	ПользовательИнфБазыИмя = СокрЛП(ПользовательИнфБазыИмя);
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	НастроитьДоступ();
КонецПроцедуры
&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияСтандартнаяПриИзменении(Элемент)
	НастроитьДоступ();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСПриИзменении(Элемент)
	ПользовательИнфБазыПользовательОС = "\\ENT\" + СокрЛП(ПользовательИнфБазыПользовательОС);
	если ЗначениеЗаполнено(ПользовательИнфБазыПользовательОС) тогда
		ПользовательИнфБазыАутентификацияОС = истина;
	конецесли;
КонецПроцедуры
&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		Результат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС");
		
		если ТипЗнч(Результат) = Тип("Строка") тогда
			ПользовательИнфБазыПользовательОС = Результат;
			ПользовательИнфБазыАутентификацияОС = истина;
			ЭтаФорма.Модифицированность = истина;
		конецесли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = истина;
	ПроверкаПароля();
КонецПроцедуры
&НаКлиенте
Процедура ПодтверждениеПароляПриИзменении(Элемент)
	ПарольИзменен = истина;
	ПроверкаПароля();
КонецПроцедуры
&НаКлиенте
Процедура ПроверкаПароля()
	если Пароль <> ПодтверждениеПароля тогда
		ПроверкаПароля = "(пароли не совпадают)";
	иначе
		ПроверкаПароля = неопределено;
	конецесли;
КонецПроцедуры

////////////////////////////////////////

&НаКлиенте
Процедура УдалитьНастройкиПользователя(Команда)
	если Вопрос("Удалить настройки пользователя?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да тогда
		УдалитьНастройкиПользователяНаСервере();
	конецесли;
КонецПроцедуры
&НаСервере
Процедура УдалитьНастройкиПользователяНаСервере()
	УстановитьПривилегированныйРежим(истина);
	ХранилищеСистемныхНастроек.Удалить(неопределено, неопределено, ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ));
	УстановитьПривилегированныйРежим(ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИнтерфейсТакси(Команда)
	если не ЗначениеЗаполнено(ПользовательИнфБазыИмя) тогда
		Сообщить("Не заполнено имя пользователя");
		возврат;
	конецесли;
	
	//если Объект.Ссылка = ПараметрыСеансаСервер.Получить("ТекущийПользователь") тогда
	//	//УправлениеПользователямиСервер.НастроитьИнтерфейсТакси();
	//	УправлениеПользователямиСервер.НастроитьИнтерфейсПриложения(, ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	//	
	//	если Вопрос("Выполнить перезапуск?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
	//		ЗавершитьРаботуСистемы(истина, истина);
	//	конецесли;
	//иначе
	//	//УправлениеПользователямиСервер.НастроитьИнтерфейсТакси(ПользовательИнфБазыИмя);
	//	УправлениеПользователямиСервер.НастроитьИнтерфейсПриложения(ПользовательИнфБазыИмя, ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	//конецесли;
КонецПроцедуры
