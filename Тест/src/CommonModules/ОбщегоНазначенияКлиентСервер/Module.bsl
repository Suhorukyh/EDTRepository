
// Сравнивает расписания между собой.
//
// Параметры
//	Расписание1, Расписание2 - РасписаниеРегламентногоЗадания
//
// Возвращаемое значение
//  Булево - истина, если расписания идентичны, иначе ложь.
Функция РасписанияОдинаковые(Знач Расписание1, Знач Расписание2) Экспорт
	Расписание1 = РасписаниеВСтруктуру(Расписание1);
	Расписание2 = РасписаниеВСтруктуру(Расписание2);
	
	Для Каждого РеквизитРасписания Из Расписание1 Цикл
		Если ТипЗнч(РеквизитРасписания.Значение) <> Тип("Массив") Тогда
			Если РеквизитРасписания.Значение <> Расписание2[РеквизитРасписания.Ключ] Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если РеквизитРасписания.Значение.Количество() <> Расписание2[РеквизитРасписания.Ключ].Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для НомерЭлемента = 0 По РеквизитРасписания.Значение.Количество()-1 Цикл
				Если РеквизитРасписания.Ключ = "ДетальныеРасписанияДня" Тогда
					Если Не РасписанияОдинаковые(РеквизитРасписания.Значение[НомерЭлемента],Расписание2[РеквизитРасписания.Ключ][НомерЭлемента]) Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если РеквизитРасписания.Значение[НомерЭлемента] <> Расписание2[РеквизитРасписания.Ключ][НомерЭлемента] Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Преобразует РасписаниеРегламентногоЗадания в структуру.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания;
// 
// Возвращаемое значение:
//  Структура.
//
Функция РасписаниеВСтруктуру(Знач Расписание) Экспорт
	
	ЗначениеРасписания = Расписание;
	Если ЗначениеРасписания = Неопределено Тогда
		ЗначениеРасписания = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(Результат, ЗначениеРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого РасписаниеДля Из Расписание.ДетальныеРасписанияДня Цикл
		ДетальныеРасписанияДня.Добавить(РасписаниеВСтруктуру(РасписаниеДля));
	КонецЦикла;
	Результат.Вставить("ДетальныеРасписанияДня", ДетальныеРасписанияДня);
	Возврат Результат;
	
КонецФункции		

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// формирует полное имя файла
Функция ПолучитьИмяФайла(знач ИмяКаталога, знач ИмяФайла) Экспорт
	ИмяКаталога = СокрЛП(ИмяКаталога);
	ИмяФайла = СокрЛП(ИмяФайла);
	
	возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;
КонецФункции

// преобразование стандартного периода в строку
Функция ПериодСтрокой(Период) Экспорт
	перем Результат;
	
	если НачалоДня(Период.ДатаНачала) = НачалоДня(Период.ДатаОкончания) тогда
		// один день
		Результат = Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy");
	иначеесли НачалоДня(Период.ДатаНачала) = НачалоМесяца(Период.ДатаНачала) и КонецДня(Период.ДатаОкончания) = КонецМесяца(Период.ДатаНачала) тогда
		// один месяц
		Результат = Формат(Период.ДатаНачала, "ДФ='MMMM yyyy р.'");
	иначеесли НачалоДня(Период.ДатаНачала) = НачалоГода(Период.ДатаНачала) и КонецДня(Период.ДатаОкончания) = КонецГода(Период.ДатаНачала) тогда
		// один год
		Результат = Формат(Период.ДатаНачала, "ДФ='yyyy р.'");
	иначеесли НачалоДня(Период.ДатаНачала) = НачалоМесяца(Период.ДатаНачала) и КонецДня(Период.ДатаОкончания) = КонецМесяца(Период.ДатаОкончания) и Год(Период.ДатаНачала) = Год(Период.ДатаОкончания) тогда
		// несколько месяцев, один год
		Результат = Формат(Период.ДатаНачала, "ДФ=MMMM") + " - " + Формат(Период.ДатаОкончания, "ДФ='MMMM yyyy р.'");
	иначеесли НачалоДня(Период.ДатаНачала) = НачалоМесяца(Период.ДатаНачала) и КонецДня(Период.ДатаОкончания) = КонецМесяца(Период.ДатаОкончания) тогда
		// несколько месяцев, несколько лет
		Результат = Формат(Период.ДатаНачала, "ДФ='MMMM yyyy р.'") + " - " + Формат(Период.ДатаОкончания, "ДФ='MMMM yyyy р.'");
	иначе
		// сложный период
		Результат = Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	конецесли;
	
	возврат НРег(Результат);
КонецФункции

// проверяет и при необходимости устанавливает период отчета по стандартному периоду
Процедура ПроверитьПараметрыДанных(Настройки) Экспорт
	перем ПериодОтчета, Период;
	
	ПериодОтчета = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("Период"));
	
	если ПериодОтчета <> неопределено и Период <> неопределено и Период.Использование и ЗначениеЗаполнено(Период.Значение) тогда
		// запущен старый пользовательский вариант отчета - копируем значение параметра
		
		ПериодОтчета.Значение = Период.Значение;
		ПериодОтчета.Использование = истина;
	конецесли;
КонецПроцедуры

// проверка символов в строке
Функция ЭтоБуквы(Строка) Экспорт
	перем Буквы, Позиция;
	
	если СтрДлина(Строка) = 0 тогда
		возврат ложь;
	конецесли;
	
	Буквы = "QWERTYUIOPASDFGHJKLZXCVBNMЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁІЄЇ";
	
	для Позиция = 1 по СтрДлина(Строка) цикл
		если СтрНайти(Буквы, Сред(Строка, Позиция, 1)) = 0 тогда
			возврат ложь;
		конецесли;
	конеццикла;
	
	возврат истина;
КонецФункции
Функция ЭтоЦифры(Строка) Экспорт
	перем Цифры, Позиция;
	
	если СтрДлина(Строка) = 0 тогда
		возврат ложь;
	конецесли;
	
	Цифры = "0123456789";
	
	для Позиция = 1 по СтрДлина(Строка) цикл
		если СтрНайти(Цифры, Сред(Строка, Позиция, 1)) = 0 тогда
			возврат ложь;
		конецесли;
	конеццикла;
	
	возврат истина;
КонецФункции

Функция Минимум(Значение1, Значение2 = неопределено, Значение3 = неопределено, Значение4 = неопределено, Значение5 = неопределено) Экспорт
	перем Результат;
	
	Результат = Значение1;
	
	если Значение2 <> неопределено и Результат > Значение2 тогда
		Результат = Значение2;
	конецесли;
	если Значение3 <> неопределено и Результат > Значение3 тогда
		Результат = Значение3;
	конецесли;
	если Значение4 <> неопределено и Результат > Значение4 тогда
		Результат = Значение4;
	конецесли;
	если Значение5 <> неопределено и Результат > Значение5 тогда
		Результат = Значение5;
	конецесли;
	
	возврат Результат;
КонецФункции
Функция Максимум(Значение1, Значение2 = неопределено, Значение3 = неопределено, Значение4 = неопределено, Значение5 = неопределено) Экспорт
	перем Результат;
	
	Результат = Значение1;
	
	если Значение2 <> неопределено и Результат < Значение2 тогда
		Результат = Значение2;
	конецесли;
	если Значение3 <> неопределено и Результат < Значение3 тогда
		Результат = Значение3;
	конецесли;
	если Значение4 <> неопределено и Результат < Значение4 тогда
		Результат = Значение4;
	конецесли;
	если Значение5 <> неопределено и Результат < Значение5 тогда
		Результат = Значение5;
	конецесли;
	
	возврат Результат;
КонецФункции

// выводит сообщение пользователю
Процедура ВывестиСообщениеПользователю(Текст, Поле = неопределено) Экспорт
	перем Сообщение;
	
	Сообщение = новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	
	если Поле <> неопределено тогда
		Сообщение.Поле = Поле;
	конецесли;
	
	Сообщение.Сообщить();
КонецПроцедуры

// пауза без загрузки процессора и отображения на экране
Процедура Пауза(Секунды) Экспорт
	перем ОбъектСистемы;
	перем НачальноеВремя, ТекущееВремя;
	
	попытка
		ОбъектСистемы = новый COMОбъект("WScript.Shell");
		//ОбъектСистемы.Run("sleep " + СокрЛП(Число(Секунды * 1000)), 0, 1);
		ОбъектСистемы.Run("ping 127.0.0.1 -n " + СокрЛП(Число(Секунды + 1)), 0, 1);
	исключение
		НачальноеВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		пока ТекущееВремя - НачальноеВремя < Секунды * 1000 цикл
			ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		конеццикла;
	конецпопытки
КонецПроцедуры

// переводит элементы документа с русского на украинский
Процедура ПеревестиДокумент(Документ) Экспорт
	перем Область;
	
	Область = Документ.НайтиТекст("Итого", Область,, истина, истина, истина, ложь);
	если Область <> неопределено тогда
    	Область.Текст = "Разом";
	конецесли;
КонецПроцедуры

//+Порицкий А 12042018

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
// См. также:
//   Одноименные свойства объекта "ЭлементОтбораКомпоновкиДанных" в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-Порицкий А 12042018

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

//++Никитчин М.В. 11.07.18
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

//++Никитчин М.В. 11.07.18
// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

//++Никитчин М.В. 11.07.18
// Сохраняет файл на диске
// ПолноеИмяФайла
// Хранилище    – ХранилищеЗначения, которое содержит объект типа 
//                ДвоичныеДанные с файлом для записи на диск.
Функция СохранитьФайлНаДиске(ПолноеИмяФайла, Содержимое, ТолькоЧтение = ложь)  Экспорт
	перем ФайлНаДиске, КаталогНаДиске;
	
	попытка
		ФайлНаДиске = новый Файл(ПолноеИмяФайла);
		КаталогНаДиске = новый Файл(ФайлНаДиске.Путь);
		
		если не КаталогНаДиске.Существует() тогда
			СоздатьКаталог(КаталогНаДиске);
		конецесли;
		
		если ФайлНаДиске.Существует() тогда
			если ФайлНаДиске.ПолучитьТолькоЧтение() тогда
				ФайлНаДиске.УстановитьТолькоЧтение(ложь);
			конецесли;
		конецесли;
		
		Содержимое.Записать(ПолноеИмяФайла);
		
		ФайлНаДиске.УстановитьТолькоЧтение(ТолькоЧтение);
		Возврат Истина;	
	исключение
		Сообщение = новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Текст = "Ошибка записи файла"+ОписаниеОшибки();
		Сообщение.Сообщить();	
		Возврат Ложь;	
	Конецпопытки;
	
КонецФункции
