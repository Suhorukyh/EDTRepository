
// проверяет дублирование элементов в списке
Функция ПроверитьДублирование(Список) Экспорт
	перем Количество;
	
	//если не ЗначениеЗаполнено(Список) тогда
	//	возврат ложь;
	//конецесли;
	
	Количество = Список.Количество();
	
	для Индекс1 = 0 по Количество - 2 цикл
		для Индекс2 = Индекс1 + 1 по Количество - 1 цикл
			если Список[Индекс1] = Список[Индекс2] тогда
				возврат истина;
			конецесли;
		конеццикла;
	конеццикла;
	
	возврат ложь;
КонецФункции

// Возвращает Истина, если конфигурация запущена под управлением платформы 1С:Предприятие 8.3 без использования режима совместимости
// с версией 8.3.2 или более ранней.
//
Функция ЭтоПлатформа83БезРежимаСовместимости() Экспорт
	//#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	//	Возврат СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости();
	//#Иначе
	//	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоПлатформа83БезРежимаСовместимости;
	//#КонецЕсли
	
	СистемнаяИнформация = новый СистемнаяИнформация;
	
	возврат Лев(СистемнаяИнформация.ВерсияПриложения, 4) = "8.3." и Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать;
КонецФункции

// возвращает список ссылок на объект
Функция СсылкиНаОбъект(Ссылка, НайтиВсе, Справочники = истина, Документы = истина, Регистры = ложь) Экспорт
	перем СписокСсылок, ОбластьПоиска, ВключитьОбъекты, ИсключитьОбъекты;
	перем ОбъектМетаданных;
	перем Таблица, НомерЗаписи, ЗаписьТаблицы;
	
	УстановитьПривилегированныйРежим(истина);
	
	СписокСсылок = новый Массив;
	СписокСсылок.Добавить(Ссылка);
	
	ОбластьПоиска = новый Массив;
	
	ВключитьОбъекты = новый Массив;
	ИсключитьОбъекты = новый Массив;
	
	для каждого ОбъектМетаданных из Метаданные.Справочники цикл
		если Справочники тогда
			ВключитьОбъекты.Добавить(ОбъектМетаданных);
		иначе
			ИсключитьОбъекты.Добавить(ОбъектМетаданных);
		конецесли;
	конеццикла;
	для каждого ОбъектМетаданных из Метаданные.Документы цикл
		если Документы тогда
			ВключитьОбъекты.Добавить(ОбъектМетаданных);
		иначе
			ИсключитьОбъекты.Добавить(ОбъектМетаданных);
		конецесли;
	конеццикла;
	для каждого ОбъектМетаданных из Метаданные.РегистрыСведений цикл
		если Регистры тогда
			ВключитьОбъекты.Добавить(ОбъектМетаданных);
		иначе
			ИсключитьОбъекты.Добавить(ОбъектМетаданных);
		конецесли;
	конеццикла;
	для каждого ОбъектМетаданных из Метаданные.РегистрыНакопления цикл
		если Регистры тогда
			ВключитьОбъекты.Добавить(ОбъектМетаданных);
		иначе
			ИсключитьОбъекты.Добавить(ОбъектМетаданных);
		конецесли;
	конеццикла;
	
	Таблица = НайтиПоСсылкам(СписокСсылок, ОбластьПоиска, ВключитьОбъекты, ИсключитьОбъекты);
	
	если НайтиВсе = ложь тогда
		УстановитьПривилегированныйРежим(ложь);
	конецесли;
	
	НомерЗаписи = Таблица.Количество() - 1;
	пока НомерЗаписи >= 0 цикл
		ЗаписьТаблицы = Таблица[НомерЗаписи];
		
		если ЗаписьТаблицы.Метаданные = Метаданные.РегистрыСведений.ВерсииОбъектов тогда
			// версии объектов
			Таблица.Удалить(НомерЗаписи);
		иначеесли ЗаписьТаблицы.Метаданные = Метаданные.РегистрыСведений.ИсторияИзменений тогда
			// история изменений
			Таблица.Удалить(НомерЗаписи);
		иначеесли ЗаписьТаблицы.Метаданные = Метаданные.РегистрыСведений.НастройкиПользователей тогда
			// настройки пользователей
			Таблица.Удалить(НомерЗаписи);
		иначеесли ЗаписьТаблицы.Метаданные = Метаданные.РегистрыСведений.НастройкиПользователейРЛС тогда
			// настройки пользователей РЛС
			Таблица.Удалить(НомерЗаписи);
		иначеесли ЗаписьТаблицы.Данные = ЗаписьТаблицы.Ссылка тогда
			// рекурсивная ссылка на себя
			Таблица.Удалить(НомерЗаписи);
		иначеесли Метаданные.Справочники.Содержит(ЗаписьТаблицы.Метаданные) тогда
			попытка
				если ЗаписьТаблицы.Данные.ПометкаУдаления тогда
					// удаленный справочник
					Таблица.Удалить(НомерЗаписи);
				конецесли;
			исключение
				// недоступный справочник
				Таблица.Удалить(НомерЗаписи);
			конецпопытки;
		иначеесли Метаданные.Документы.Содержит(ЗаписьТаблицы.Метаданные) тогда
			попытка
				если ЗаписьТаблицы.Данные.ПометкаУдаления тогда
					// удаленный документ
					Таблица.Удалить(НомерЗаписи);
				конецесли;
			исключение
				// недоступный документ
				Таблица.Удалить(НомерЗаписи);
			конецпопытки;
		конецесли;
		
		НомерЗаписи = НомерЗаписи - 1;
	конеццикла;
	
	если НайтиВсе = истина тогда
		УстановитьПривилегированныйРежим(ложь);
	конецесли;
	
	возврат Таблица;
КонецФункции

// возвращает значение реквизита по имени
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	возврат Ссылка[ИмяРеквизита];
КонецФункции
Функция ЗначениеРеквизитаОбъектаИлиРодителя(знач Ссылка, ИмяРеквизита) Экспорт
	перем Результат;
	
	УстановитьПривилегированныйРежим(истина);
	
	пока не ЗначениеЗаполнено(Ссылка[ИмяРеквизита]) и ЗначениеЗаполнено(Ссылка.Родитель) цикл
		Ссылка = Ссылка.Родитель;
	конеццикла;
	Результат = Ссылка[ИмяРеквизита];
	
	УстановитьПривилегированныйРежим(ложь);
	
	возврат Результат;
КонецФункции
Функция ЗначениеПодчиненногоРеквизита(знач Ссылка, знач ИмяРеквизита) Экспорт
	пока истина цикл
		Позиция = СтрНайти(ИмяРеквизита, ".");
		если Позиция = 0 тогда
			прервать;
		конецесли;
		Ссылка = Ссылка[Лев(ИмяРеквизита, Позиция - 1)];
		ИмяРеквизита = Сред(ИмяРеквизита, Позиция + 1);
	конеццикла;
	
	возврат Ссылка[ИмяРеквизита];
КонецФункции

// ищем ссылку на родителя первого уровня
Функция ВерхнийРодитель(знач Элемент) Экспорт
	пока ЗначениеЗаполнено(Элемент.Родитель) цикл
		Элемент = Элемент.Родитель;
	конеццикла;
	
	возврат Элемент;
КонецФункции

// отчеты
Функция ПолучитьПараметрыРасшифровки(Расшифровка, ДанныеРасшифровки) Экспорт
	перем Данные, Родители, Родитель, Поле;
	перем ПараметрыРасшифровки;
	
	ПараметрыРасшифровки = новый Структура;
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Поле = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля()[0];
	ПараметрыРасшифровки.Вставить("Поле", Поле.Поле);
	если Поле.Значение <> null тогда
		ПараметрыРасшифровки.Вставить(Поле.Поле, Поле.Значение);
	конецесли;
	
	Родители = Данные.Элементы.Получить(Расшифровка).ПолучитьРодителей();
	для каждого Родитель из Родители цикл
		если ТипЗнч(Родитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") тогда
			Поле = Данные.Элементы.Получить(Родитель.Идентификатор).ПолучитьПоля()[0];
			ПараметрыРасшифровки.Вставить(Поле.Поле, Поле.Значение);
		конецесли;
	конеццикла;
	
	возврат ПараметрыРасшифровки;
КонецФункции
Функция ЗаполнитьПользовательскиеНастройкиОтчета(ИмяОтчета, ИмяВарианта = неопределено, ПараметрыОтчета) Экспорт
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	если ИмяВарианта <> неопределено тогда
		Вариант = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта);
		если Вариант <> неопределено тогда
			Настройки = Вариант.Настройки; 			
		конецесли; 		
	иначе			
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();		
	конецесли; 
	
	если Настройки <> неопределено тогда
		для каждого ПараметрОтчета из ПараметрыОтчета цикл
			Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных(ПараметрОтчета.Ключ));
			если Параметр <> неопределено тогда
				Параметр.Значение = ПараметрОтчета.Значение;
				Параметр.Использование = истина;
			конецесли;
		конеццикла;
	конецесли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции

// программное заполнение связей параметров выбора
Процедура ДобавитьСвязьПараметровВыбора(Элемент, Имя, ПутьКДанным, ИзменениеЗначения = неопределено) Экспорт
	перем СвязиПараметровВыбора;
	перем НомерСвязи, НоваяСвязь;
	
    СвязиПараметровВыбора = новый Массив();
	
	для НомерСвязи = 0 по Элемент.СвязиПараметровВыбора.Количество() - 1 цикл
		СвязиПараметровВыбора.Добавить(Элемент.СвязиПараметровВыбора[НомерСвязи]);
	конеццикла;
	
	если ИзменениеЗначения = неопределено тогда
		НоваяСвязь = новый СвязьПараметраВыбора(Имя, ПутьКДанным);
	иначе
		НоваяСвязь = новый СвязьПараметраВыбора(Имя, ПутьКДанным, ИзменениеЗначения);
	конецесли;
	
    СвязиПараметровВыбора.Добавить(НоваяСвязь);
	
    Элемент.СвязиПараметровВыбора = новый ФиксированныйМассив(СвязиПараметровВыбора);
КонецПроцедуры

// запись в журнал регистрации
Процедура ЗаписатьСобытиеВыполнениеОтчета(ОбъектМетаданных) Экспорт
	ЗаписьЖурналаРегистрации("Отчеты. Использование отчета", УровеньЖурналаРегистрации.Информация, ОбъектМетаданных);
КонецПроцедуры
Процедура ЗаписатьСобытиеВыполнениеОбработки(ОбъектМетаданных) Экспорт
	ЗаписьЖурналаРегистрации("Обработки. Использование обработки", УровеньЖурналаРегистрации.Информация, ОбъектМетаданных);
КонецПроцедуры

// проверяет наличие доступа к указанному объекту справочника
Функция ПроверитьДоступ(Ссылка) Экспорт
	попытка
		ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Ссылка, "Код");
		возврат истина;
	исключение
		возврат ложь;
	конецпопытки;
КонецФункции

// включает признак записывать движения, используется при проведении документов
Процедура ЗаписыватьДвижения(Движения) Экспорт
	перем НаборЗаписей;
	
	для каждого НаборЗаписей из Движения цикл
		НаборЗаписей.Записывать = истина;
	конеццикла;
КонецПроцедуры
// записывает движения, использвется при проведении документов
Процедура ЗаписатьДвижения(Движения) Экспорт
	перем НаборЗаписей;
	
	для каждого НаборЗаписей из Движения цикл
		НаборЗаписей.Записать(истина);
	конеццикла;
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

//Никитчин М.В. 11.07.18
// Получает ДанныеФайла и сам файл как ДвоичныеДанные
// Параметры
//  ПутьКФайлу  - ПолныПустьКФайлуНаДиске
// Возвращаемое значение:
//   ДвоичныеДанные - файл как ДвоичныеДанные и подпись файла как ДвоичныеДанные
Функция ПолучитьДвоичныеДанные(ПолныйПуть) Экспорт
	
	Попытка
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	Исключение
		// запись в журнал регистрации
		СообщениеОбОшибке = "Не удалось прочитать данные файла:" + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		
		ВызватьИсключение "Не удалось прочитать данные файла";
		
	КонецПопытки;
			
	Возврат ДвоичныеДанные;
	
КонецФункции

