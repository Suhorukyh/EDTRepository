
// чтение параметра сеанса
Функция Получить(Наименование) Экспорт
	возврат ПараметрыСеанса[Наименование];
КонецФункции
// запись параметра сеанса
Процедура Установить(Наименование, Значение) Экспорт
	ПараметрыСеанса[Наименование] = Значение;
КонецПроцедуры

// устанавливаем параметры сеанса
Процедура УстановитьПараметрыСеанса(ТребуемыеПараметры) Экспорт
	перем ТекущийПользователь, Пользователь;
	
	если ТребуемыеПараметры = неопределено тогда
		возврат;
	конецесли;
		
	если ТребуемыеПараметры.Найти("ТекущийПользователь") <> неопределено тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		если ЗначениеЗаполнено(ТекущийПользователь.Имя) тогда
			// аутентифицированный пользователь
			
			//ЗаписьЖурналаРегистрации("Параметры сеанса. Текущий пользователь", УровеньЖурналаРегистрации.Информация, , , ТекущийПользователь.Имя);
			
			Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользователь.УникальныйИдентификатор);
			
			если Пользователь.Пустая() тогда
				УправлениеПользователямиСервер.ОбновитьСправочникПользователей();
				Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользователь.УникальныйИдентификатор);
			конецесли;
			
			если Пользователь.Пустая() тогда
				#Если Клиент Тогда
					Предупреждение("Пользователь не найден");
				#КонецЕсли
				возврат;
			иначеесли Пользователь.Недействителен тогда
				#Если Клиент Тогда
					Предупреждение("Пользователь недействителен");
				#КонецЕсли
				возврат;
			иначе
				ПараметрыСеанса.ТекущийПользователь = Пользователь;
			конецесли;
		иначе
			// список пользователей не заполнен или предопределенное регламентное задание
			
			//ЗаписьЖурналаРегистрации("Параметры сеанса. Текущий пользователь", УровеньЖурналаРегистрации.Информация, , , "Пользователь не установлен");
			
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
		конецесли;
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИспользоватьНапоминания") <> неопределено тогда
		ПараметрыСеанса.ИспользоватьНапоминания = Константы.ИспользоватьНапоминанияПользователя.Получить();
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИнтервалПроверкиНапоминаний") <> неопределено тогда
		ПараметрыСеанса.ИнтервалПроверкиНапоминаний = Макс(Константы.ИнтервалПроверкиНапоминаний.Получить(), 1);
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИнтервалОбновленияСписков") <> неопределено тогда
		ПараметрыСеанса.ИнтервалОбновленияСписков = Макс(Константы.ИнтервалОбновленияСписков.Получить(), 1);
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИзменятьЗагруженные") <> неопределено тогда
		ПараметрыСеанса.ИзменятьЗагруженные = ложь;
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИзменятьВсеПериоды") <> неопределено тогда
		ПараметрыСеанса.ИзменятьВсеПериоды = ложь;
	конецесли;
	
	если ТребуемыеПараметры.Найти("ПоказанаБазаАСКУГ") <> неопределено тогда
		ПараметрыСеанса.ПоказанаБазаАСКУГ = ложь;
	конецесли;
	
	если ТребуемыеПараметры.Найти("КаталогВыгрузкиВМедок") <> неопределено тогда
		ПараметрыСеанса.КаталогВыгрузкиВМедок = "";
	конецесли;
	
	если ТребуемыеПараметры.Найти("ИспользоватьРЛС") <> неопределено или ТребуемыеПараметры.Найти("ОрганизацииЧтение") <> неопределено или ТребуемыеПараметры.Найти("ОрганизацииЗапись") <> неопределено или ТребуемыеПараметры.Найти("СтруктурныеЕдиницыЧтение") <> неопределено или ТребуемыеПараметры.Найти("СтруктурныеЕдиницыЗапись") <> неопределено тогда
		УстановитьПараметрыСеансаРЛС();
	конецесли;
	
	// установка следующих параметров сеанса не требуется
	
	//если ТребуемыеПараметры.Найти("ТекстОшибки") <> неопределено тогда
	//если ТребуемыеПараметры.Найти("ПолныеПраваПодтверждены") <> неопределено тогда
	//если ТребуемыеПараметры.Найти("ДоступПодтвержден") <> неопределено тогда
	//если ТребуемыеПараметры.Найти("УровеньБазы") <> неопределено тогда
КонецПроцедуры
Процедура УстановитьПараметрыСеансаРЛС() Экспорт
	перем Пользователь, Значение, НайденыПодчиненные;
	перем ОрганизацииЧтение, ОрганизацииЗапись;
	перем СтруктурныеЕдиницыЧтение, СтруктурныеЕдиницыЗапись;
	перем ИспользоватьРЛС;
	
	ПараметрыСеанса.ИспользоватьРЛС = ложь;
	
	// использование РЛС и списки доступа
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	если не ЗначениеЗаполнено(Пользователь) тогда
		// нет пользователей или регламентное задание
		ИспользоватьРЛС = ложь;
	иначеесли РольДоступна(Метаданные.Роли.АдминистраторСистемы) или РольДоступна(Метаданные.Роли.АдминистраторПАТ) или РольДоступна(Метаданные.Роли.ПолныеПрава) тогда
		// пользователь без ограничений рлс
		ИспользоватьРЛС = ложь;
	иначеесли РольДоступна(Метаданные.Роли.Обмен) и Пользователь.Служебный тогда
		// служебный пользователь без ограничений рлс
		ИспользоватьРЛС = ложь;
	иначе
		// обычный пользователь
		ИспользоватьРЛС = Константы.ИспользоватьРЛС.Получить();
	конецесли;
	
	ОрганизацииЧтение = новый Массив;
	ОрганизацииЗапись = новый Массив;
	СтруктурныеЕдиницыЧтение = новый Массив;
	СтруктурныеЕдиницыЗапись = новый Массив;
	
	если ИспользоватьРЛС тогда
		
		// основная организация
		
		Значение = УправлениеПользователямиПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
		если ЗначениеЗаполнено(Значение) тогда
			// чтение и запись
			ОрганизацииЧтение.Добавить(Значение);
			ОрганизацииЗапись.Добавить(Значение);
		конецесли;
		
		// основная структурная единица
		
		Значение = УправлениеПользователямиПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяСтруктурнаяЕдиница");
		если ЗначениеЗаполнено(Значение) тогда
			// подчиненные структурные единицы - чтение и запись
			Выборка = Справочники.СтруктурныеЕдиницы.Выбрать(Значение);
			НайденыПодчиненные = ложь;
			пока Выборка.Следующий() цикл
				СтруктурныеЕдиницыЧтение.Добавить(Выборка.Ссылка);
				СтруктурныеЕдиницыЗапись.Добавить(Выборка.Ссылка);
				НайденыПодчиненные = истина;
			конеццикла;
			
			// основная структурная единица - чтение, чтение и запись при отсутствии подчиненных
			если НайденыПодчиненные тогда
				СтруктурныеЕдиницыЧтение.Добавить(Значение);
			иначе
				СтруктурныеЕдиницыЧтение.Добавить(Значение);
				СтруктурныеЕдиницыЗапись.Добавить(Значение);
			конецесли;
			
			// родитель основной структурной единицы - чтение
			если ЗначениеЗаполнено(Значение.Родитель) тогда
				СтруктурныеЕдиницыЧтение.Добавить(Значение.Родитель);
			конецесли;
		конецесли;
		
		// явные настройки доступа
		
		Выборка = РегистрыСведений.НастройкиПользователейРЛС.Выбрать(новый Структура("Пользователь", Пользователь));
		пока Выборка.Следующий() цикл
			если Выборка.ПраваДоступа = Перечисления.ПраваДоступа.Чтение тогда
				
				если ЗначениеЗаполнено(Выборка.Организация) и ОрганизацииЧтение.Найти(Выборка.Организация) = неопределено тогда
					ОрганизацииЧтение.Добавить(Выборка.Организация);
				конецесли;
				если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) и СтруктурныеЕдиницыЧтение.Найти(Выборка.СтруктурнаяЕдиница) = неопределено тогда
					СтруктурныеЕдиницыЧтение.Добавить(Выборка.СтруктурнаяЕдиница);
				конецесли;
				если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница.Родитель) и СтруктурныеЕдиницыЧтение.Найти(Выборка.СтруктурнаяЕдиница.Родитель) = неопределено тогда
					СтруктурныеЕдиницыЧтение.Добавить(Выборка.СтруктурнаяЕдиница.Родитель);
				конецесли;
				
			иначеесли Выборка.ПраваДоступа = Перечисления.ПраваДоступа.Запись тогда
				
				если ЗначениеЗаполнено(Выборка.Организация) и ОрганизацииЧтение.Найти(Выборка.Организация) = неопределено тогда
					ОрганизацииЧтение.Добавить(Выборка.Организация);
				конецесли;
				если ЗначениеЗаполнено(Выборка.Организация) и ОрганизацииЗапись.Найти(Выборка.Организация) = неопределено тогда
					ОрганизацииЗапись.Добавить(Выборка.Организация);
				конецесли;
				если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) и СтруктурныеЕдиницыЧтение.Найти(Выборка.СтруктурнаяЕдиница) = неопределено тогда
					СтруктурныеЕдиницыЧтение.Добавить(Выборка.СтруктурнаяЕдиница);
				конецесли;
				если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) и СтруктурныеЕдиницыЗапись.Найти(Выборка.СтруктурнаяЕдиница) = неопределено тогда
					СтруктурныеЕдиницыЗапись.Добавить(Выборка.СтруктурнаяЕдиница);
				конецесли;
				если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница.Родитель) и СтруктурныеЕдиницыЧтение.Найти(Выборка.СтруктурнаяЕдиница.Родитель) = неопределено тогда
					СтруктурныеЕдиницыЧтение.Добавить(Выборка.СтруктурнаяЕдиница.Родитель);
				конецесли;
				
			конецесли;
		конеццикла;
		
	конецесли;
	
	СтруктурныеЕдиницыЧтение.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	СтруктурныеЕдиницыЗапись.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	ПараметрыСеанса.ИспользоватьРЛС = ИспользоватьРЛС;
	
	ПараметрыСеанса.ОрганизацииЧтение = новый ФиксированныйМассив(ОрганизацииЧтение);
	ПараметрыСеанса.ОрганизацииЗапись = новый ФиксированныйМассив(ОрганизацииЗапись);
	ПараметрыСеанса.СтруктурныеЕдиницыЧтение = новый ФиксированныйМассив(СтруктурныеЕдиницыЧтение);
	ПараметрыСеанса.СтруктурныеЕдиницыЗапись = новый ФиксированныйМассив(СтруктурныеЕдиницыЗапись);
КонецПроцедуры

// проверяем параметры сеанса
Процедура ПроверитьПараметрыСеанса(Отказ) Экспорт
	перем Пользователь;
	
	попытка
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	исключение
		Отказ = истина;
	конецпопытки;
КонецПроцедуры

// обработка сообщения об ошибке
Функция УстановитьТекстОшибки(Значение) Экспорт
	ПараметрыСеанса.ТекстОшибки = Значение;
КонецФункции
Функция ПолучитьТекстОшибки() Экспорт
	возврат ПараметрыСеанса.ТекстОшибки;
КонецФункции
