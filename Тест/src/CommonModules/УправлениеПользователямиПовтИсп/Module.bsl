
// возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт
	перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей
	|ГДЕ
	|	Пользователь = &Пользователь
	|	И Настройка = &Настройка
	|";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
КонецФункции

// возвращает список групп для текущего или заданного пользователя или группы
Функция ПолучитьГруппыПользователей(знач ГруппаПользователь = неопределено, ВключаяПереданного = истина, ВключаяПустого = истина) Экспорт
	перем ГруппыПользователей;
	
	если ГруппаПользователь = неопределено тогда
		ГруппаПользователь = ПараметрыСеанса.ТекущийПользователь;
	конецесли;
	
	ГруппыПользователей = новый Массив;
	
	// добавляем пользователя или группу
	
	если ВключаяПереданного тогда
		ГруппыПользователей.Добавить(ГруппаПользователь);
	конецесли;
	если ВключаяПустого тогда
		ГруппыПользователей.Добавить(неопределено);
	конецесли;
	
	// добавляем группы из справочника пользователей
	
	если ТипЗнч(ГруппаПользователь) = Тип("СправочникСсылка.Пользователи") тогда
		ГруппаПользователей = ГруппаПользователь.Родитель;
		
		пока ЗначениеЗаполнено(ГруппаПользователей) цикл
			ГруппыПользователей.Добавить(ГруппаПользователей);
			ГруппаПользователей = ГруппаПользователей.Родитель;
		конеццикла;
	конецесли;
	
	// добавляем группы из справочника групп пользователей
	
	если ТипЗнч(ГруппаПользователь) = Тип("СправочникСсылка.Пользователи") тогда
		Запрос = новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка КАК ГруппаПользователей
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав
		|ГДЕ
		|	Пользователь = &Пользователь
		|";
		Запрос.УстановитьПараметр("Пользователь", ГруппаПользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		пока Выборка.Следующий() цикл
			ГруппыПользователей.Добавить(Выборка.ГруппаПользователей);
		конеццикла;
	конецесли;
	
	возврат ГруппыПользователей;
КонецФункции

// возвращает список подсистем для заданного объекта метаданных
Функция ПолучитьПодсистемы(ОбъектМетаданных)
	перем Запрос, Выборка;
	перем Подсистемы;
	
	Подсистемы = новый Массив;
	
	// предопределенные подсистемы
	
	если ПроверитьСоставПодсистемы(Метаданные.Подсистемы.ГРС, ОбъектМетаданных) тогда
		Подсистемы.Добавить(Справочники.Подсистемы.ГРС);
	конецесли;
	если ПроверитьСоставПодсистемы(Метаданные.Подсистемы.Потребители, ОбъектМетаданных) тогда
		Подсистемы.Добавить(Справочники.Подсистемы.Потребители);
	конецесли;
	если ПроверитьСоставПодсистемы(Метаданные.Подсистемы.ОперативныйУчет, ОбъектМетаданных) тогда
		Подсистемы.Добавить(Справочники.Подсистемы.ОперативныйУчет);
	конецесли;
	если ПроверитьСоставПодсистемы(Метаданные.Подсистемы.ФактическийУчет, ОбъектМетаданных) тогда
		Подсистемы.Добавить(Справочники.Подсистемы.ФактическийУчет);
	конецесли;
	
	// пользовательские подсистемы
	
	если Метаданные.Документы.Содержит(ОбъектМетаданных) тогда
		Запрос = новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ
		|	Справочник.Подсистемы.Документы
		|ГДЕ
		|	Имя = &Имя
		|";
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Имя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		пока Выборка.Следующий() цикл
			Подсистемы.Добавить(Выборка.Ссылка);
		конеццикла;
	иначеесли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) тогда
		Запрос = новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ
		|	Справочник.Подсистемы.РегистрыСведений
		|ГДЕ
		|	Имя = &Имя
		|";
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Имя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		пока Выборка.Следующий() цикл
			Подсистемы.Добавить(Выборка.Ссылка);
		конеццикла;
	конецесли;
	
	возврат Подсистемы;
КонецФункции
Функция ПроверитьСоставПодсистемы(ГлавнаяПодсистема, ОбъектМетаданных)
	перем Подсистемы;
	
	Подсистемы = новый Массив;
	Подсистемы.Добавить(ГлавнаяПодсистема);
	
	Индекс = 0;
	пока Индекс < Подсистемы.Количество() цикл
		для каждого Подсистема из Подсистемы[Индекс].Подсистемы цикл
			Подсистемы.Добавить(Подсистема);
		конеццикла;
		Индекс = Индекс + 1;
	конеццикла;
	
	для каждого Подсистема из Подсистемы цикл
		если Подсистема.Состав.Содержит(ОбъектМетаданных) тогда
			возврат истина;
		конецесли;
	конеццикла;
	
	возврат ложь;
КонецФункции		

// возвращает список доступных пользователю рабочих периодов
// возвращается таблицу периодов и их срок действия
// при превышении срока действия необходимо заново получить список рабочих периодов
Функция ПолучитьРабочиеПериоды(Организация, ПолноеИмяОбъектаМетаданных) Экспорт
	перем РабочиеПериодыГлобальные, РабочиеПериодыЛокальные, РабочиеПериоды;
	перем РабочийПериодГлобальный, РабочийПериодЛокальный, РабочийПериод;
	перем Пользователь, ГруппыПользователей, Подсистемы;
	перем Запрос, Выборка;
	перем Порядок, ТекущаяДата, МаксимальнаяДата;
	перем НачалоПериода, КонецПериода, СрокДействия;
	
	РабочиеПериоды = новый ТаблицаЗначений;
	РабочиеПериоды.Колонки.Добавить("НачалоПериода", новый ОписаниеТипов("Дата"));
	РабочиеПериоды.Колонки.Добавить("КонецПериода", новый ОписаниеТипов("Дата"));
	РабочиеПериоды.Колонки.Добавить("СрокДействия", новый ОписаниеТипов("Дата"));
	
	МаксимальнаяДата = Дата(3999, 12, 31, 23, 59, 59);
	
	если ПараметрыСеанса.ИзменятьВсеПериоды тогда
		РабочийПериод = РабочиеПериоды.Добавить();
		РабочийПериод.НачалоПериода = Дата(1, 1, 1);
		РабочийПериод.КонецПериода = МаксимальнаяДата;
		РабочийПериод.СрокДействия = МаксимальнаяДата;
		возврат РабочиеПериоды;
	конецесли;
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ГруппыПользователей = УправлениеПользователямиПовтИсп.ПолучитьГруппыПользователей(Пользователь, ложь, ложь);
	
	Подсистемы = ПолучитьПодсистемы(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных));
	
	ТекущаяДата = ТекущаяДата();
	
	// глобальные периоды
	
	РабочиеПериодыГлобальные = РабочиеПериоды.СкопироватьКолонки();
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ГруппаПользователь = &Пользователь ТОГДА 1
	|		КОГДА ГруппаПользователь В (&ГруппаПользователь) ТОГДА 2
	|		КОГДА ТипЗначения(ГруппаПользователь) ЕСТЬ NULL ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПоПользователю,
	|	ВЫБОР
	|		КОГДА Подсистема = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка) ТОГДА 3
	|		КОГДА Подсистема.Предопределенный ТОГДА 2
	|		КОГДА НЕ Подсистема.Предопределенный ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПоПодсистеме,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ПОМЕСТИТЬ втПериоды1
	|ИЗ
	|	РегистрСведений.РабочиеПериодыГлобальные
	|ГДЕ
	|	Организация = &Организация
	|	И (Подсистема = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка) ИЛИ Подсистема В (&Подсистемы))
	|	И (КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ИЛИ НачалоПериода <= КонецПериода)
	|	И (СрокДействия = ДАТАВРЕМЯ(1, 1, 1) ИЛИ &ТекущаяДата <= СрокДействия)
	|;
	|ВЫБРАТЬ
	|	(ПорядокПоПользователю - 1) * 3 + ПорядокПоПодсистеме КАК Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ПОМЕСТИТЬ втПериоды2
	|ИЗ
	|	втПериоды1
	|ГДЕ
	|	ПорядокПоПользователю <> 0 И ПорядокПоПодсистеме <> 0
	|;
	|ВЫБРАТЬ
	|	Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ИЗ
	|	втПериоды2
	|ГДЕ
	|	Порядок <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подсистемы", Подсистемы);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ГруппаПользователь", ГруппыПользователей);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Порядок = неопределено;
	
	пока Выборка.Следующий() цикл
		если Порядок <> неопределено и Выборка.Порядок <> Порядок тогда
			прервать;
		конецесли;
		
		РабочийПериодГлобальный = РабочиеПериодыГлобальные.Добавить();
		РабочийПериодГлобальный.НачалоПериода = Выборка.НачалоПериода;
		
		если ЗначениеЗаполнено(Выборка.КонецПериода) тогда
			// конец периода установлен явно
			РабочийПериодГлобальный.КонецПериода = КонецДня(Выборка.КонецПериода);
		иначеесли Выборка.НачалоПериода <= ТекущаяДата тогда
			// конец периода вычисляется по текущей дате
			РабочийПериодГлобальный.КонецПериода = КонецДня(ТекущаяДата);
		иначе
			// конец перида вычисляется по началу периода
			РабочийПериодГлобальный.КонецПериода = КонецДня(Выборка.НачалоПериода);
		конецесли;
		
		если ЗначениеЗаполнено(Выборка.СрокДействия) тогда
			// срок действия установлен явно
			РабочийПериодГлобальный.СрокДействия = Выборка.СрокДействия;
		иначеесли не ЗначениеЗаполнено(Выборка.КонецПериода) тогда
			// срок действия вычисляется автоматически
			РабочийПериодГлобальный.СрокДействия = РабочийПериодГлобальный.КонецПериода;
		иначе
			// срок действия не ограничен
			РабочийПериодГлобальный.СрокДействия = МаксимальнаяДата;
		конецесли;
	конеццикла;
	
	если РабочиеПериодыГлобальные.Количество() = 0 тогда
		РабочийПериодГлобальный = РабочиеПериодыГлобальные.Добавить();
		РабочийПериодГлобальный.НачалоПериода = Дата(1, 1, 1);
		РабочийПериодГлобальный.КонецПериода = МаксимальнаяДата;
		РабочийПериодГлобальный.СрокДействия = МаксимальнаяДата;
	конецесли;
	
	// локальные периоды
	
	РабочиеПериодыЛокальные = РабочиеПериоды.СкопироватьКолонки();
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ГруппаПользователь = &Пользователь ТОГДА 1
	|		КОГДА ГруппаПользователь В (&ГруппаПользователь) ТОГДА 2
	|		КОГДА ТипЗначения(ГруппаПользователь) ЕСТЬ NULL ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПоПользователю,
	|	ВЫБОР
	|		КОГДА Подсистема = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка) ТОГДА 3
	|		КОГДА Подсистема.Предопределенный ТОГДА 2
	|		КОГДА НЕ Подсистема.Предопределенный ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПоПодсистеме,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ПОМЕСТИТЬ втПериоды1
	|ИЗ
	|	РегистрСведений.РабочиеПериодыЛокальные
	|ГДЕ
	|	Организация = &Организация
	|	И (Подсистема = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка) ИЛИ Подсистема В (&Подсистемы))
	|	И (КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ИЛИ НачалоПериода <= КонецПериода)
	|	И (СрокДействия = ДАТАВРЕМЯ(1, 1, 1) ИЛИ &ТекущаяДата <= СрокДействия)
	|;
	|ВЫБРАТЬ
	|	(ПорядокПоПользователю - 1) * 3 + ПорядокПоПодсистеме КАК Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ПОМЕСТИТЬ втПериоды2
	|ИЗ
	|	втПериоды1
	|ГДЕ
	|	ПорядокПоПользователю <> 0 И ПорядокПоПодсистеме <> 0
	|;
	|ВЫБРАТЬ
	|	Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|ИЗ
	|	втПериоды2
	|ГДЕ
	|	Порядок <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НачалоПериода,
	|	КонецПериода,
	|	СрокДействия
	|";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подсистемы", Подсистемы);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ГруппаПользователь", ГруппыПользователей);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Порядок = неопределено;
	
	пока Выборка.Следующий() цикл
		если Порядок <> неопределено и Выборка.Порядок <> Порядок тогда
			прервать;
		конецесли;
		
		РабочийПериодЛокальный = РабочиеПериодыЛокальные.Добавить();
		РабочийПериодЛокальный.НачалоПериода = Выборка.НачалоПериода;
		
		если ЗначениеЗаполнено(Выборка.КонецПериода) тогда
			// конец периода установлен явно
			РабочийПериодЛокальный.КонецПериода = КонецДня(Выборка.КонецПериода);
		иначеесли Выборка.НачалоПериода <= ТекущаяДата тогда
			// конец периода вычисляется по текущей дате
			РабочийПериодЛокальный.КонецПериода = КонецДня(ТекущаяДата);
		иначе
			// конец перида вычисляется по началу периода
			РабочийПериодЛокальный.КонецПериода = КонецДня(Выборка.НачалоПериода);
		конецесли;
		
		если ЗначениеЗаполнено(Выборка.СрокДействия) тогда
			// срок действия установлен явно
			РабочийПериодЛокальный.СрокДействия = Выборка.СрокДействия;
		иначеесли не ЗначениеЗаполнено(Выборка.КонецПериода) тогда
			// срок действия вычисляется автоматически
			РабочийПериодЛокальный.СрокДействия = РабочийПериодЛокальный.КонецПериода;
		иначе
			// срок действия не ограничен
			РабочийПериодЛокальный.СрокДействия = МаксимальнаяДата;
		конецесли;
		
	конеццикла;
	
	если РабочиеПериодыЛокальные.Количество() = 0 тогда
		РабочийПериодЛокальный = РабочиеПериодыЛокальные.Добавить();
		РабочийПериодЛокальный.НачалоПериода = Дата(1, 1, 1);
		РабочийПериодЛокальный.КонецПериода = МаксимальнаяДата;
		РабочийПериодЛокальный.СрокДействия = МаксимальнаяДата;
	конецесли;
	
	// объединяем глобальные и локальные рабочие периоды
	
	для каждого РабочийПериодГлобальный из РабочиеПериодыГлобальные цикл
		для каждого РабочийПериодЛокальный из РабочиеПериодыЛокальные цикл
			НачалоПериода = ОбщегоНазначенияКлиентСервер.Максимум(РабочийПериодГлобальный.НачалоПериода, РабочийПериодЛокальный.НачалоПериода);
			КонецПериода = ОбщегоНазначенияКлиентСервер.Минимум(РабочийПериодГлобальный.КонецПериода, РабочийПериодЛокальный.КонецПериода);
			СрокДействия = ОбщегоНазначенияКлиентСервер.Минимум(РабочийПериодГлобальный.СрокДействия, РабочийПериодЛокальный.СрокДействия);
			
			если НачалоПериода <= КонецПериода тогда
				РабочийПериод = РабочиеПериоды.Добавить();
				РабочийПериод.НачалоПериода = НачалоПериода;
				РабочийПериод.КонецПериода = КонецПериода;
				РабочийПериод.СрокДействия = СрокДействия;
			конецесли;
		конеццикла;
	конеццикла;
	
	возврат РабочиеПериоды;
КонецФункции

// возвращает используемый вариант интерфейса
Функция ПолучитьВариантИнтерфейса(ИмяПользователя = неопределено) Экспорт
	перем Настройки;
	
	УстановитьПривилегированныйРежим(истина);
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,, ИмяПользователя);
	
	если не ТипЗнч(Настройки) = Тип("НастройкиКлиентскогоПриложения") тогда
		Настройки = новый НастройкиКлиентскогоПриложения;
	конецесли;
	
	УстановитьПривилегированныйРежим(ложь);
	
	возврат Настройки.ВариантИнтерфейсаКлиентскогоПриложения;
КонецФункции

// проверяет доступность роли
Функция РольДоступнаАдминистраторСистемы() Экспорт
	возврат РольДоступна(Метаданные.Роли.АдминистраторСистемы);
КонецФункции
Функция РольДоступнаПолныеПрава() Экспорт
	возврат РольДоступна(Метаданные.Роли.ПолныеПрава) или РольДоступна(Метаданные.Роли.АдминистраторСистемы);
КонецФункции
Функция РольДоступнаАдминистраторПАТ() Экспорт
	возврат РольДоступна(Метаданные.Роли.АдминистраторПАТ) или РольДоступна(Метаданные.Роли.ПолныеПрава) или РольДоступна(Метаданные.Роли.АдминистраторСистемы);
КонецФункции
