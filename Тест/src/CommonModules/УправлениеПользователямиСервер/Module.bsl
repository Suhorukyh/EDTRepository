
// добавляем новых пользователей в справочник или обновляем реквизиты
Процедура ОбновитьСправочникПользователей() Экспорт
	перем СписокПользователейИБ, ПользовательИБ;
	перем СписокПользователей, Пользователь;
	перем ПолныйСписок;
	
	попытка
		СписокПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		ПолныйСписок = истина;
	исключение
		СписокПользователейИБ = новый Массив;
		СписокПользователейИБ.Добавить(ПользователиИнформационнойБазы.ТекущийПользователь());
		ПолныйСписок = ложь;
	конецпопытки;
	
	СписокПользователей = новый СписокЗначений;
	
	// добавляем или обновляем справочник пользователей
	
	Для Каждого ПользовательИБ Из СписокПользователейИБ Цикл
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		
		Если Пользователь.Пустая() Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			Пользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
			Пользователь.ОбменДанными.Загрузка = истина;
			Пользователь.Записать();
		ИначеЕсли СокрЛП(Пользователь.Наименование) <> СокрЛП(ПользовательИБ.ПолноеИмя) Тогда
			Пользователь = Пользователь.ПолучитьОбъект();
			Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
			Пользователь.ОбменДанными.Загрузка = истина;
			Пользователь.Записать();
		КонецЕсли;
		
		СписокПользователей.Добавить(Пользователь.Ссылка);
	КонецЦикла;
	
	// отсутствующих пользователей отключаем в справочнике 
	
	если ПолныйСписок тогда
		Выборка = Справочники.Пользователи.Выбрать();
		пока Выборка.Следующий() цикл
			Если Выборка.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			если не Выборка.Недействителен и СписокПользователей.НайтиПоЗначению(Выборка.Ссылка) = неопределено тогда
				Пользователь = Выборка.ПолучитьОбъект();
				Пользователь.Недействителен = истина;
				Пользователь.ОбменДанными.Загрузка = истина;
				Пользователь.Записать();
			конецесли;
		конеццикла;
	конецесли;
КонецПроцедуры

// проверяет возможность запуска ИБ для текущего пользователя
Процедура ПроверитьВозможностьРаботыПользователя(Отказ) Экспорт
	перем НомерСеанса, ТекущийСеанс;
	перем Сеанс, МассивСеансов, Сообщение;
	
	если УправлениеПользователямиПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПараметрыСеанса.ТекущийПользователь, "ЗапускНесколькихСеансов") тогда
		возврат;
	конецесли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	//если не ЗаблокироватьВход() тогда
	//	Отказ = истина;
	//	#Если Клиент Тогда
	//		Предупреждение("Ошибка блокировки данных", 60);
	//	#КонецЕсли
	//	возврат;
	//конецесли;

	НомерСеанса = НомерСеансаИнформационнойБазы();
	//МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	МассивСеансов = УправлениеПользователямиСервер.ПолучитьНеспящиеСеансыИнформационнойБазы();
	
	для каждого Сеанс из МассивСеансов цикл
		если Сеанс.НомерСеанса = НомерСеанса тогда
			ТекущийСеанс = Сеанс;
			прервать;
		конецесли;
	конеццикла;
	
	для каждого Сеанс из МассивСеансов цикл
		если Сеанс.НомерСеанса = НомерСеанса тогда
			// текущий сеанс - пропускаем
			продолжить;
		иначеесли Сеанс.НомерСеанса > НомерСеанса тогда
			// запущенный позже сеанс - не учитываем
			продолжить;
		иначеесли Сеанс.ИмяПриложения <> ТекущийСеанс.ИмяПриложения тогда
			// другое приложение - не учитываем
			продолжить;
		иначеесли Сеанс.Пользователь = неопределено  тогда
			// неизвестный пользователь - не учитываем
			продолжить;
		иначеесли Сеанс.Пользователь.УникальныйИдентификатор <> ТекущийСеанс.Пользователь.УникальныйИдентификатор тогда
			// другой пользователь - не учитываем
			продолжить;
		иначеесли Сеанс.ИмяКомпьютера <> ТекущийСеанс.ИмяКомпьютера тогда
			// другой компьютер - не учитываем
			продолжить;
		конецесли;
		
		Отказ = истина;
		
		ЗаписьЖурналаРегистрации("Сеанс. Проверка сеансов пользователя", УровеньЖурналаРегистрации.Предупреждение, , , "Запрещен повторный вход");
		
		#Если Клиент Тогда
			Предупреждение("Программа уже запущена", 60);
		#КонецЕсли
		
		возврат;
	конеццикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Функция ЗаблокироватьВход()
	перем Блокировка, ЭлементБлокировки;
	
	Блокировка = новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "Константа.БлокировкаВхода";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	попытка
		Блокировка.Заблокировать();
		возврат истина;
	исключение
		возврат ложь;
	конецпопытки;
КонецФункции

// определяет пользователей по правам
//Функция ПользовательАдминистратор() Экспорт
//	возврат РольДоступна(Метаданные.Роли.Администратор);
//КонецФункции
Функция ПользовательОбмен() Экспорт
	перем ПользовательИБ, Роль;
	перем РольОбмен, РольДругая;
	
	РольОбмен = ложь;
	РольДругая = ложь;
	
	УстановитьПривилегированныйРежим(истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(ложь);
	
	если ПользовательИБ <> неопределено тогда
		для каждого Роль из ПользовательИБ.Роли цикл
			если Роль = Метаданные.Роли.Обмен тогда
				РольОбмен = истина;
			иначе
				РольДругая = истина;
			конецесли;
		конеццикла;
	конецесли;
	
	//возврат РольОбмен;
	возврат РольОбмен и не РольДругая;
КонецФункции

// проверяет наличие паролей у пользователей
Процедура ПроверитьПаролиПользователей() Экспорт
	перем ПользователиИБ, ПользовательИБ, Пользователь;
	
	если не РольДоступна(Метаданные.Роли.АдминистраторСистемы) и не РольДоступна(Метаданные.Роли.АдминистрированиеПользователей) тогда
		возврат;
	конецесли;
	
	УстановитьПривилегированныйРежим(истина);
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	УстановитьПривилегированныйРежим(ложь);
	
	для каждого ПользовательИБ из ПользователиИБ цикл
		если ПользовательИБ.АутентификацияСтандартная и не ПользовательИБ.ПарольУстановлен тогда
			Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			если не Пользователь.Пустая() и не Пользователь.Недействителен тогда
				Сообщить("Не введен пароль для пользователя " + ПользовательИБ.Имя);
			конецесли;
		конецесли;
	конеццикла;
КонецПроцедуры

// проверяет доступ к редактированию пользователя и его настроек
Функция ДоступноРедактированиеПользователя(Пользователь) Экспорт
	перем ПользовательИБ, Роль;
	
	// новый пользователь
	если не ЗначениеЗаполнено(Пользователь) тогда
		возврат истина;
	конецесли;
	
	// служебный пользователь
	если не УправлениеПользователямиПовтИсп.РольДоступнаАдминистраторСистемы() тогда
		если Пользователь.Служебный или Пользователь = Справочники.Пользователи.Обмен тогда
			возврат ложь;
		конецесли;
	конецесли;
	
	// существующий пользователь
	УстановитьПривилегированныйРежим(истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(ложь);
	
	если ПользовательИБ = неопределено тогда
		возврат истина;
	конецесли;
	
	// пользователь с особыми правами
	для каждого Роль из ПользовательИБ.Роли цикл
		если Роль = Метаданные.Роли.АдминистраторСистемы и не УправлениеПользователямиПовтИсп.РольДоступнаАдминистраторСистемы() тогда
			возврат ложь;
		//иначеесли Роль = Метаданные.Роли.АдминистраторПАТ и не УправлениеПользователямиПовтИсп.РольДоступнаАдминистраторПАТ() тогда
		//	возврат ложь;
		//иначеесли Роль = Метаданные.Роли.ПолныеПрава и не УправлениеПользователямиПовтИсп.РольДоступнаПолныеПрава() тогда
		//	возврат ложь;
		конецесли;
	конеццикла;
	
	возврат истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция НовыеПараметрыАдминистрированияИБ(Знач ИмяАдминистратораИБ = "",
	Знач ПарольАдминистратораИБ = "", Знач ИмяАдминистратораКластера = "",
	Знач ПарольАдминистратораКластера = "", Знач ПортКластераСерверов = 0, 
	Знач ПортАгентаСервера = 0) 
	
	Возврат Новый Структура("ИмяАдминистратораИБ,
		|ПарольАдминистратораИБ,
		|ИмяАдминистратораКластера,
		|ПарольАдминистратораКластера,
		|ПортКластераСерверов,
		|ПортАгентаСервера",
		ИмяАдминистратораИБ,
		ПарольАдминистратораИБ,
		ИмяАдминистратораКластера,
		ПарольАдминистратораКластера,
		ПортКластераСерверов,
		ПортАгентаСервера);
КонецФункции
&НаСервере
Функция ПолучитьПараметрыАдминистрированияИБ() Экспорт
	Результат = НовыеПараметрыАдминистрированияИБ();
	СтруктураНастроек = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтруктураНастроек);
	КонецЕсли;
	Возврат Результат;
КонецФункции
&НаСервере
Процедура ЗаписатьПараметрыАдминистрированияИБ(Параметры) Экспорт
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(Параметры));
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// настройка интерфейса "такси"

Функция НастроитьИнтерфейсПриложения(ИмяПользователя = неопределено, знач ВариантИнтерфейса = неопределено) Экспорт
	перем Настройки;
	перем Записать;
	
	// возвращает истину в случае необходимости перезапуска
	
	УстановитьПривилегированныйРежим(истина);
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,, ИмяПользователя);
	
	Записать = ложь;
	
	если не ТипЗнч(Настройки) = Тип("НастройкиКлиентскогоПриложения") тогда
		Настройки = новый НастройкиКлиентскогоПриложения;
		//Записать = истина;
	конецесли;
	
	если ВариантИнтерфейса = неопределено тогда
		// выбираем заданный интерфейс
		ВариантИнтерфейса = Настройки.ВариантИнтерфейсаКлиентскогоПриложения;
	конецесли;
	
	если ВариантИнтерфейса <> ВариантИнтерфейсаКлиентскогоПриложения.Такси и ПараметрыСеанса.ТекущийПользователь.ИспользоватьИнтерфейсТакси тогда
		// обязательно используем интерфейс такси
		ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	конецесли;
	
	если ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси тогда
		// включаем и настраиваем интерфейс такси
		
		если Настройки.ВариантИнтерфейсаКлиентскогоПриложения <> ВариантИнтерфейсаКлиентскогоПриложения.Такси тогда
			Настройки.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
			Записать = истина;
		конецесли;
		
		если Настройки.ВариантМасштабаФормКлиентскогоПриложения <> ВариантМасштабаФормКлиентскогоПриложения.Компактный тогда
			Настройки.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
			Записать = истина;
		конецесли;
		
		НастроитьИнтерфейсТакси(ИмяПользователя);
	иначеесли ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 тогда
		// включаем и настраиваем интерфейс управляемое приложение
		
		если Настройки.ВариантИнтерфейсаКлиентскогоПриложения <> ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 тогда
			Настройки.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2;
			Записать = истина;
		конецесли;
	иначе
		Сообщить("Неизвестный вариант интерфейса клиентского приложения: " + Строка(ВариантИнтерфейса));
		Записать = ложь;
	конецесли;
	
	если Записать тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения",, Настройки,, ИмяПользователя);
	конецесли;
	
	УстановитьПривилегированныйРежим(ложь);
	
	возврат Записать;
КонецФункции

Процедура НастроитьИнтерфейсТакси2(ИмяПользователя = неопределено)
	перем НастройкиИнтерфейса, СоставИнтерфейса;
	перем Группа;
	
	// настройка в коде, не удалять
	
	УстановитьПривилегированныйРежим(истина);
	
	НастройкиИнтерфейса = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения",,, ИмяПользователя);
	
	если НастройкиИнтерфейса = неопределено тогда
		НастройкиИнтерфейса = новый НастройкиИнтерфейсаКлиентскогоПриложения;
	конецесли;
	
	СоставИнтерфейса = НастройкиИнтерфейса.ПолучитьСостав();
	
	СоставИнтерфейса.Верх.Очистить();
	СоставИнтерфейса.Лево.Очистить();
	СоставИнтерфейса.Низ.Очистить();
	СоставИнтерфейса.Право.Очистить();	
	
	СоставИнтерфейса.Верх.Добавить(новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	
	Группа = новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Группа.Добавить(новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	Группа.Добавить(новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	СоставИнтерфейса.Верх.Добавить(Группа);
	
	СоставИнтерфейса.Лево.Добавить(новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельФункцийТекущегоРаздела"));
	
	НастройкиИнтерфейса.УстановитьСостав(СоставИнтерфейса);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения",, НастройкиИнтерфейса,, ИмяПользователя);
	
	УстановитьПривилегированныйРежим(ложь);
КонецПроцедуры
Процедура НастроитьИнтерфейсТакси(ИмяПользователя = неопределено) Экспорт
	УстановитьПривилегированныйРежим(истина);
	
	ХранилищеСистемныхНастроек.Удалить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения",, ИмяПользователя);
	
	УстановитьПривилегированныйРежим(ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// обработка сеансов пользователей

&НаСервере
Процедура ЗавершитьАктивныеСеансыИнформационнойБазы(НомераСеансов = неопределено, ТекущийСеанс = истина) Экспорт
	попытка
		Сеансы = ПолучитьАктивныеСеансыИнформационнойБазы(ПолучитьПараметрыАдминистрированияИБ(), НомераСеансов, ТекущийСеанс);
		
		если Сеансы.Количество() = 0 тогда
			Сообщение = "Нет активных сеансов";
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Информация, , , Сообщение);
			возврат;
		конецесли;
		
		для каждого Сеанс из Сеансы.Сеансы цикл
			Сеансы.АгентСервера.TerminateSession(Сеансы.КластерСерверов, Сеанс);
			Сообщение = ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Разорван сеанс: Пользователь %1, компьютер %2, начат %3, режим %4'"),
								Сеанс.UserName,
								Сеанс.Host,
								Сеанс.StartedAt,
								Сеанс.AppID);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Информация, , , Сообщение);
		конеццикла;
		
		Сеансы = ПолучитьАктивныеСеансыИнформационнойБазы(ПолучитьПараметрыАдминистрированияИБ(), НомераСеансов, ТекущийСеанс);
		
		если Сеансы.Количество() <> 0 тогда
			вызватьисключение "Сеансы не завершены (" + Формат(Сеансы.Количество(), "ЧГ=0") + " шт.)";
		конецесли;
	исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	конецпопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьНеспящиеСеансыИнформационнойБазы() Экспорт
	перем Сеансы, Сеанс, ИндексСеанса;
	перем Sessions, Session;
	
	// получаем все сеансы
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	// удаляем спящие сеансы
	
	попытка
		Sessions = ПолучитьАктивныеСеансыИнформационнойБазы(ПолучитьПараметрыАдминистрированияИБ(), неопределено, истина).Сеансы;
		
		для каждого Session из Sessions цикл
			если не Session.Hibernate тогда
				продолжить;
			конецесли;
			
			ИндексСеанса = 0;
			пока ИндексСеанса < Сеансы.Количество() цикл
				Сеанс = Сеансы[ИндексСеанса];
				если Сеанс.НомерСеанса = Session.SessionID тогда
					Сеансы.Удалить(ИндексСеанса);
					прервать;
				конецесли;
				ИндексСеанса = ИндексСеанса + 1;
			конеццикла;
		конеццикла;
	исключение
		Сообщить(ОписаниеОшибки());
	конецпопытки;
	
	возврат Сеансы;
КонецФункции
&НаСервере
Функция ПолучитьАктивныеСеансыИнформационнойБазы(НастройкаБлокировки, НомераСеансов = неопределено, ТекущийСеанс = истина) Экспорт
	Результат = Новый Структура("АгентСервера,КластерСерверов,Сеансы", Неопределено, Неопределено, Новый Массив);
	ПодстрокиСтрокиСоединения = РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(), ";");
	
	если ПодстрокиСтрокиСоединения.Количество() < 2 тогда
		// файловая информационная база - возвращаем пустой список
		возврат Результат;
	конецесли;
	
	ИмяСервера = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = РазложитьСтрокуВМассивПодстрок(СистемнаяИнфо.ВерсияПриложения, ".");
	ИмяCOMСоединителя="v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
	// создаем "v83.COMConnector", если он не зарегистрирован или не той версии - попадаем на исключение, пользователи не отключаются
	попытка
		COMСоединитель = Новый COMОбъект(ИмяCOMСоединителя);
	исключение
		ВызватьИсключение "Ошибка при создании объекта " + ИмяCOMСоединителя;
	конецпопытки;
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли НастройкаБлокировки.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = НастройкаБлокировки.ПортКластераСерверов;
	Иначе
		НомерПортаКластера = COMСоединитель.RMngrPortDefault;
	КонецЕсли;
	
	Если НастройкаБлокировки.ПортАгентаСервера <> 0 Тогда
		НомерПортаАгента = НастройкаБлокировки.ПортАгентаСервера;
	ИначеЕсли РазделительПорта > 0 Тогда
		НомерПортаАгента = НомерПортаКластера - 1;
	Иначе
		НомерПортаАгента = COMСоединитель.RAgentPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если НомерПортаАгента <> 0 Тогда
		ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + Формат(НомерПортаАгента, "ЧГ=0");
	КонецЕсли;
	
	// Подключение к агенту сервера
	АгентСервера = COMСоединитель.ConnectAgent(ИдентификаторАгентаСервера);
	Результат.АгентСервера = АгентСервера; 
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.КластерСерверов = Кластер; 
		АгентСервера.Authenticate(Кластер, НастройкаБлокировки.ИмяАдминистратораКластера, НастройкаБлокировки.ПарольАдминистратораКластера);
		
		// Получаем список сеансов
		НомерТекущегоСеанса = НомерСеансаИнформационнойБазыНаСервере();
		СписокСеансов = АгентСервера.GetSessions(Кластер);
		Для Каждого Сеанс из СписокСеансов Цикл
			Если ВРег(Сеанс.InfoBase.Name) <> ВРег(ИмяИБ) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ТекущийСеанс И (НомерТекущегоСеанса = Сеанс.SessionID) Тогда
				// пропускаем текущий сеанс
			ИначеЕсли НомераСеансов <> Неопределено И НомераСеансов.Найти(Сеанс.SessionID) = Неопределено Тогда
				// пропускаем не включенные в список
			Иначе
				Результат.Сеансы.Добавить(Сеанс);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
&НаСервере
Функция НомерСеансаИнформационнойБазыНаСервере()
	возврат НомерСеансаИнформационнойБазы();
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
&НаСервере
Функция СократитьДвойныеКавычки(знач Строка)
	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;
КонецФункции 
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(знач Стр, Разделитель = ",")
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции 
