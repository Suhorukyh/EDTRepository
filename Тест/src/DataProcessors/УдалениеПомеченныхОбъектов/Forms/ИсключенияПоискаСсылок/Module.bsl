&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)

    Возврат ВнешниеОбработки.Подключить(АдресХранилища, АдресХранилища);

КонецФункции 

&НаСервере
Процедура ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, ИмяТипа)
	Если Метаданные[ИмяТипа].Количество() > 0 Тогда
		ФильтрПоМетаданным.Добавить(ИмяТипа)
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ФильтрПоМетаданным = Новый СписокЗначений;
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Константы");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Справочники");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Документы");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ЖурналыДокументов");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Перечисления");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыВидовХарактеристик");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыСчетов");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыВидовРасчета");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "РегистрыСведений");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "РегистрыНакопления");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "РегистрыБухгалтерии");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "РегистрыРасчета");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "БизнесПроцессы");
	ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Задачи");
	П = Новый Структура("КоллекцииВыбираемыхОбъектовМетаданных,ВыбранныеОбъектыМетаданных", ФильтрПоМетаданным,Объект.ИсключенияПоискаСсылок);
    ОткрытьФорму(ПолноеИмяОбработки +".Форма.ВыборОбъектовМетаданных", П);

КонецПроцедуры

&НаСервере
Функция  ИспользуемоеИмяФайла()

	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		Объект.ИсключенияПоискаСсылок.ЗагрузитьЗначения(Параметр.ВыгрузитьЗначения())
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИмяОбработки()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПолноеИмяОбработки") Тогда
		ПолноеИмяОбработки = Параметры.ПолноеИмяОбработки
	КонецЕсли;
	
	об = РеквизитФормыВЗначение("Объект");
	Если Параметры.Свойство("ИсключенияПоискаСсылок") Тогда
		об.ИсключенияПоискаСсылок.ЗагрузитьЗначения(Параметры.ИсключенияПоискаСсылок);
		ЗначениеВРеквизитФормы(об, "Объект")
	КонецЕсли;
	
	Если об.ИсключенияПоискаСсылок.Количество() = 0 Тогда
		Попытка
			//Объект.ИсключенияПоискаСсылок.ЗагрузитьЗначения(ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок())
			осОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Объект.ИсключенияПоискаСсылок.ЗагрузитьЗначения(осОбработкаОбъект.ПолучитьИсключенияПоискаСсылок())
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяОбработки) Тогда
		Если Не ЗначениеЗаполнено(ИмяОбработки) Тогда	
			АдресХранилища = "";
			Попытка
				Результат = ПоместитьФайл(АдресХранилища, СокрЛП(ИспользуемоеИмяФайла()), , Ложь);
				ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяОбработки) Тогда	
		    ПолноеИмяОбработки = "Обработка."+ ИмяОбработки()
		Иначе
		    ПолноеИмяОбработки = "ВнешняяОбработка."+ ИмяОбработки
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	ИсключенияПоискаСсылок = ИсключенияПоискаСсылок().ВыгрузитьЗначения();
	//Оповестить("ИсключенияПоискаСсылок", ИсключенияПоискаСсылок, Параметры.УникальныйИдентификаторИсточник);
	Оповестить("ИсключенияПоискаСсылок", ИсключенияПоискаСсылок);
	Закрыть(ИсключенияПоискаСсылок)
КонецПроцедуры

&НаСервере
Функция  ИсключенияПоискаСсылок()

	Возврат РеквизитФормыВЗначение("Объект").ИсключенияПоискаСсылок;

КонецФункции

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры
