&НаКлиенте
Перем ТекущиеДанныеЗначение;

&НаКлиенте
Перем ИмяОбработки, ВыбранныеОбъектыМетаданных;

&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)

    Возврат ВнешниеОбработки.Подключить(АдресХранилища, АдресХранилища);

КонецФункции 

&НаКлиенте
Процедура КомандаИсключенияПоискаСсылок(Команда)

    // Откроем форму обработки
	П = Новый Структура("ПолноеИмяОбработки,ИсключенияПоискаСсылок", осПолноеИмяОбработки, ИсключенияПоискаСсылок().ВыгрузитьЗначения ());
    ИсключенияПоискаСсылок = ОткрытьФормуМодально(осПолноеИмяОбработки +".Форма.ИсключенияПоискаСсылок", П);
    ИсключенияПоискаСсылок(ИсключенияПоискаСсылок);

КонецПроцедуры

&НаСервере
Функция  ИсключенияПоискаСсылок(ИсключенияПоискаСсылок = Неопределено)

	об = РеквизитФормыВЗначение("Объект");
	Если ИсключенияПоискаСсылок <> Неопределено Тогда
		об.ИсключенияПоискаСсылок.ЗагрузитьЗначения(ИсключенияПоискаСсылок);
		ЗначениеВРеквизитФормы(об, "Объект")
	КонецЕсли;
	Возврат об.ИсключенияПоискаСсылок;

КонецФункции

&НаСервере
Функция  ИспользуемоеИмяФайла()

	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;

КонецФункции

&НаСервере
Функция ИмяОбработки()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя
КонецФункции

///////////////////////////////////////////////////////////////
// Обработки событий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// ++ chernav
	ОбщегоНазначенияСервер.ЗаписатьСобытиеВыполнениеОбработки(РеквизитФормыВЗначение("Объект").Метаданные());
	
	РежимУдаления = "Полный";
	
	Если Параметры.Свойство("МонопольныйРежим") Тогда
		Объект.МонопольныйРежим = Параметры.МонопольныйРежим
	КонецЕсли;
	
	об = РеквизитФормыВЗначение("Объект");
	Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначенияПереопределяемый") = Неопределено Тогда
		об.ИсключенияПоискаСсылок.ЗагрузитьЗначения(об.ПолучитьИсключенияПоискаСсылок());
	Иначе
		Попытка
			об.ИсключенияПоискаСсылок.ЗагрузитьЗначения(Вычислить("ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок()"));
		Исключение
		КонецПопытки;
	КонецЕсли;
	ЗначениеВРеквизитФормы(об, "Объект")
	
КонецПроцедуры

&НаКлиенте
Процедура РежимУдаленияПриИзменении(Элемент)
	ДоступностьКнопок();
КонецПроцедуры

// Обработчик события "при изменнии" поля "Пометка"
// Вызывает рекурсивную функцию, устанавливающую зависимые флажки пометок
// в родительских и дочерних элементах
//
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	УстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, Истина);
	
КонецПроцедуры


// Обработчик нажания на кнопку "установить все" командной панели списка
// дерева СписокПомеченныхНаУдаление.
// Устанавливает пометку всем найденым объектам
//
&НаКлиенте
Процедура КомандаСписокПомеченныхУстановитьВсе()
	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, Истина, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработчик нажания на кнопку "снять все" командной панели списка
// дерева СписокПомеченныхНаУдаление.
// Снимает пометку у всех найденых объектов
//
&НаКлиенте
Процедура КомандаСписокПомеченныхСнятьВсе()
	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, Ложь, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ПроверитьРодителя(Элемент)
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// Обработчик события "выбор" строки дерева ДеревоОставшихсяОбъектов
// Пытается открыть выбранное значение
//
&НаКлиенте
Процедура ДеревоОставшихсяОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоОставшихсяОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	// это строка отображает объект, из-за которого не удалось удалить помеченный и выбранный
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ТекущиеДанные.Значение);
	
КонецПроцедуры

// Обработчик события "выбор" строки дерева СписокПомеченныхНаУдаление
// Пытается открыть выбранное значение
//
&НаКлиенте
Процедура СписокПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекущиеДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, ИмяТипа)
	Если Метаданные[ИмяТипа].Количество() > 0 Тогда
		ФильтрПоМетаданным.Добавить(ИмяТипа)
	КонецЕсли
КонецПроцедуры

// Обработчик нажатия на кнопку "Далее" командной панели формы
// 
&НаКлиенте
Процедура ВыполнитьДалее()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ВыборРежимаУдаления Тогда
		Если РежимУдаления = "Частичный" Тогда
			ФильтрПоМетаданным = Новый СписокЗначений;
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Справочники");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Документы");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыВидовХарактеристик");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыСчетов");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "ПланыВидовРасчета");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "БизнесПроцессы");
			ФильтрПоМетаданнымДобавить(ФильтрПоМетаданным, "Задачи");
			//П = Новый Структура("КоллекцииВыбираемыхОбъектовМетаданных,ВыбранныеОбъектыМетаданных", ФильтрПоМетаданным,Объект.ИсключенияПоискаСсылок);
			П = Новый Структура("КоллекцииВыбираемыхОбъектовМетаданных", ФильтрПоМетаданным);
		    ВыбранныеОбъектыМетаданных = ОткрытьФормуМодально(осПолноеИмяОбработки +".Форма.ВыборОбъектовМетаданных", П);
			Если ВыбранныеОбъектыМетаданных = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЗаполнениеДереваПомеченныхНаУдаление(ВыбранныеОбъектыМетаданных);
		Иначе	
			Состояние(НСтр("ru = 'Выполняется поиск помеченных на удаление объектов'"));
			
			ЗаполнениеДереваПомеченныхНаУдаление();
			
			Если КоличествоУровнейПомеченныхНаУдаление = 1 Тогда
				Для Каждого Элемент Из СписокПомеченныхНаУдаление.ПолучитьЭлементы() Цикл
					Идентификатор = Элемент.ПолучитьИдентификатор();
					Элементы.СписокПомеченныхНаУдаление.Развернуть(Идентификатор, Ложь);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПомеченныеНаУдаление;
		ДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Назад" командной панели формы
//
&НаКлиенте
Процедура ВыполнитьНазад()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ПомеченныеНаУдаление Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;
		ДоступностьКнопок();
	ИначеЕсли ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления Тогда
		Если РежимУдаления = "Полный" Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;
		Иначе
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПомеченныеНаУдаление;
		КонецЕсли;
		ДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Удалить" командной панели формы
//
&НаКлиенте
Процедура ВыполнитьУдаление()
	
	Перем ТипыУдаленныхОбъектов;
	
	Если РежимУдаления = "Полный" Тогда
		Состояние(НСтр("ru = 'Выполняется поиск и удаление помеченных объектов'"));
	Иначе
		Состояние(НСтр("ru = 'Выполняется удаление выбранных объектов'"));
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если УдалениеВыбранныхНаСервере(СообщениеОбОшибке, ТипыУдаленныхОбъектов) Тогда
		//Для Каждого ТипУдаленногоОбъекта Из ТипыУдаленныхОбъектов Цикл
		//	ОповеститьОбИзменении(ТипУдаленногоОбъекта);
		//КонецЦикла;
	Иначе
		Предупреждение(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПомеченных = Истина;
	Если КоличествоНеУдаленныхОбъектов = 0 Тогда
		Если УдаленныхОбъектов = 0 Тогда
			Текст = НСтр("ru = 'Не помечено на удаление ни одного объекта. Удаление объектов не выполнялось'");
			ОбновитьДеревоПомеченных = Ложь;
		Иначе
			Текст = ПодставитьПараметрыВСтроку(
			             НСтр("ru = 'Удаление помеченных объектов успешно завершено!
			                        |Удалено объектов: %1.'"),
			             УдаленныхОбъектов);
		КонецЕсли;
		Предупреждение(Текст);
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления;
		Для Каждого Элемент Из ДеревоОставшихсяОбъектов.ПолучитьЭлементы() Цикл
			Идентификатор = Элемент.ПолучитьИдентификатор();
			Элементы.ДеревоОставшихсяОбъектов.Развернуть(Идентификатор, Ложь);
		КонецЦикла;
		ДоступностьКнопок();
		Предупреждение(СтрокаРезультатов);
	КонецЕсли;
	
	Если ОбновитьДеревоПомеченных Тогда
		ЗаполнениеДереваПомеченныхНаУдаление(ВыбранныеОбъектыМетаданных);
		
		Если КоличествоУровнейПомеченныхНаУдаление = 1 Тогда 
			Для Каждого Элемент Из СписокПомеченныхНаУдаление.ПолучитьЭлементы() Цикл
				Идентификатор = Элемент.ПолучитьИдентификатор();
				Элементы.СписокПомеченныхНаУдаление.Развернуть(Идентификатор, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

// Изменяет доступность кнопок на форме в зависимости от
// текущей страницы и состояния реквизитов формы
//
&НаКлиенте
Процедура ДоступностьКнопок()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ВыборРежимаУдаления Тогда
		Элементы.КомандаНазад.Доступность   = Ложь;
		Если РежимУдаления = "Полный" Тогда
			Элементы.КомандаДалее.Доступность   = Ложь;
			Элементы.КомандаУдалить.Доступность = Истина;
		//ИначеЕсли РежимУдаления = "Выборочный" Тогда
		Иначе
			Элементы.КомандаДалее.Доступность 	= Истина;
			Элементы.КомандаУдалить.Доступность = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ПомеченныеНаУдаление Тогда
		Элементы.КомандаНазад.Доступность   = Истина;
		Элементы.КомандаДалее.Доступность   = Ложь;
		Элементы.КомандаУдалить.Доступность = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления Тогда
		Элементы.КомандаНазад.Доступность   = Истина;
		Элементы.КомандаДалее.Доступность   = Ложь;
		Элементы.КомандаУдалить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает веть дерева в ветви СтрокиДерева по значениею Значние
// Если ветвь не найдена - создается новая
//
&НаСервере
Функция НайтиИлиДобавитьВетвьДерева(СтрокиДерева, Значение, Представление, Пометка)
	
	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", Ложь);
	
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.Пометка       = Пометка;
	КонецЕсли;
	
	Возврат Ветвь;
	
КонецФункции

&НаСервере
Функция НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокиДерева, Значение, Представление, НомерКартинки)
	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", Ложь);
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.НомерКартинки = НомерКартинки;
	КонецЕсли;

	Возврат Ветвь;
КонецФункции

// Заполняет дерево объектов помеченных на удаление
//
&НаСервере
Процедура ЗаполнениеДереваПомеченныхНаУдаление(ВыбранныеОбъектыМетаданных=Неопределено)
	
	// Заполнение дерева помеченных на удаление
	ДеревоПомеченных = РеквизитФормыВЗначение("СписокПомеченныхНаУдаление");
	
	ДеревоПомеченных.Строки.Очистить();
	
	// обработка помеченных
	//МассивПомеченных = Обработки.УдалениеПомеченныхОбъектов.ПолучитьПомеченныеНаУдаление();
    осОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МассивПомеченных = осОбработкаОбъект.ПолучитьПомеченныеНаУдаление(ВыбранныеОбъектыМетаданных);
    ЗначениеВРеквизитФормы(осОбработкаОбъект, "Объект");
    ВсеНайденные = РеквизитФормыВЗначение("осВсеНайденные");
	ВсеНайденные = осОбработкаОбъект.тчВсеНайденные.Выгрузить();
    ЗначениеВРеквизитФормы(ВсеНайденные, "осВсеНайденные");
	
	Для Каждого МассивПомеченныхЭлемент Из МассивПомеченных Цикл
		ОбъектМетаданныхЗначение = МассивПомеченныхЭлемент.Метаданные().ПолноеИмя();
		ОбъектМетаданныхПредставление = МассивПомеченныхЭлемент.Метаданные().Представление();
		//СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДерева(ДеревоПомеченных.Строки, ОбъектМетаданныхЗначение, ОбъектМетаданныхПредставление, Истина);
		//НайтиИлиДобавитьВетвьДерева(СтрокаОбъектаМетаданных.Строки, МассивПомеченныхЭлемент, Строка(МассивПомеченныхЭлемент) + " - " + ОбъектМетаданныхПредставление, Истина);
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДерева(ДеревоПомеченных.Строки, ОбъектМетаданныхЗначение, ОбъектМетаданныхПредставление, 1);
		НайтиИлиДобавитьВетвьДерева(СтрокаОбъектаМетаданных.Строки, МассивПомеченныхЭлемент, Строка(МассивПомеченныхЭлемент) + " - " + ОбъектМетаданныхПредставление, 1);
	КонецЦикла;
	
	ДеревоПомеченных.Строки.Сортировать("Значение", Истина);
	
	Для Каждого СтрокаОбъектаМетаданных Из ДеревоПомеченных.Строки Цикл
		// создать представление для строк, отображающих ветвь объекта метаданных
		СтрокаОбъектаМетаданных.Представление = СтрокаОбъектаМетаданных.Представление + " (" + СтрокаОбъектаМетаданных.Строки.Количество() + ")";
	КонецЦикла;
	
	КоличествоУровнейПомеченныхНаУдаление = ДеревоПомеченных.Строки.Количество();
	
	ЗначениеВРеквизитФормы(ДеревоПомеченных, "СписокПомеченныхНаУдаление");
	
КонецПроцедуры

// Рекурсивная функция, снимающая / устанавливающая пометки
// для зависимых родительских и дочерних элементов
//
&НаКлиенте
Процедура УстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Пометка = Пометка;
		УстановитьПометкуВСписке(Элемент, Пометка, Ложь);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если проверятьРодителя И Родитель <> Неопределено Тогда 
		ПроверитьРодителя(Родитель);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРодителя(Родитель)
	//ПометкаРодителя = Истина;
	//	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	//	Для Каждого Элемент Из ЭлементыСтроки Цикл
	//		Если Не Элемент.Пометка Тогда
	//			ПометкаРодителя = Ложь;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	
	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыСтроки)
	
КонецПроцедуры

// заимствовано из ВыборОбъектовМетаданных
&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченые    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченые И ЕстьНепомеченные) Тогда
			ЕстьПомеченые    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				ЕстьПомеченые    = ЕстьПомеченые    ИЛИ    ЭлементРодителя.Пометка;
				ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
			Иначе
				ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
				ЕстьПомеченые    = ЕстьПомеченые    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
				ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченые И ЕстьНепомеченные, 2, ?(ЕстьПомеченые, 1, 0));
	
КонецФункции

// Производит попытку удаления выбранных объектов
// Объекты, которые не были удалены показываются в отдельной таблице
//
&НаСервере
Функция УдалениеВыбранныхНаСервере(СообщениеОбОшибке, ТипыУдаленныхОбъектов)
	
	Удаляемые = Новый Массив;
	
	Если РежимУдаления = "Полный" Тогда
		// При полном удалении получаем весь список помеченных на удаление
		//Удаляемые = Обработки.УдалениеПомеченныхОбъектов.ПолучитьПомеченныеНаУдаление();
	    осОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Удаляемые = осОбработкаОбъект.ПолучитьПомеченныеНаУдаление();
	    ЗначениеВРеквизитФормы(осОбработкаОбъект, "Объект");
		//ВсеНайденные = осОбработкаОбъект.тчВсеНайденные.Выгрузить();
		//ЗначениеВРеквизитФормы(ВсеНайденные, "осВсеНайденные");
	Иначе
		// Заполняем массив ссылками на выбранные элементы, помеченные на удаление
		КоллекцияСтрокМетаданных = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
		Для Каждого СтрокаОбъектаМетаданных Из КоллекцияСтрокМетаданных Цикл
			КоллекцияСтрокСсылок = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого СтрокаСсылки Из КоллекцияСтрокСсылок Цикл
				Если СтрокаСсылки.Пометка Тогда
					Удаляемые.Добавить(СтрокаСсылки.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоУдаляемых = Удаляемые.Количество();
	
	// Выполняем удаление
	//Результат = Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъекты(Удаляемые, ТипыУдаленныхОбъектов);
    осОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Результат = осОбработкаОбъект.УдалитьПомеченныеОбъекты(Удаляемые, ТипыУдаленныхОбъектов);
	
	Если Не Результат.Статус Тогда
		СообщениеОбОшибке = Результат.Значение;
		Возврат Ложь;
	КонецЕсли;
	
	//Найденные   = Результат.Значение.Найденные;
	//НеУдаленные = Результат.Значение.НеУдаленные;
	Найденные   = Результат.Значение;
	НеУдаленные = Найденные.Скопировать(, "Ссылка");
	НеУдаленные.Свернуть("Ссылка");
	НеУдаленные = НеУдаленные.ВыгрузитьКолонку("Ссылка");
	
	КоличествоНеУдаленныхОбъектов = НеУдаленные.Количество();
	
	// Создадим таблицу оставшихся (не удаленных) объектов
	ДеревоОставшихсяОбъектов.ПолучитьЭлементы().Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоОставшихсяОбъектов");
	
	Для Каждого Найденный Из Найденные Цикл
		НеУдаленный = Найденный[0];
		Попытка
		Ссылающийся = ЗначениеИзСтрокиВнутр(Найденный[1]);
		Исключение
		Ссылающийся = Найденный[1];
		КонецПопытки;
		Попытка
		ОбъектМетаданныхСсылающегося = Найденный[2].Представление();
		Исключение
		ОбъектМетаданныхСсылающегося = Найденный[2];
		КонецПопытки;
		ОбъектМетаданныхНеУдаленногоЗначение = НеУдаленный.Метаданные().ПолноеИмя();
		ОбъектМетаданныхНеУдаленногоПредставление = НеУдаленный.Метаданные().Представление();
		//ветвь метаданного
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДереваСКартинкой(Дерево.Строки, ОбъектМетаданныхНеУдаленногоЗначение, ОбъектМетаданныхНеУдаленногоПредставление, 0);
		//ветвь не удаленного объекта
		СтрокаСсылкиНаНеУдаленныйОбъектБД = НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаОбъектаМетаданных.Строки, НеУдаленный, Строка(НеУдаленный), 2);
		//ветвь ссылки на не удаленный объект
		НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаСсылкиНаНеУдаленныйОбъектБД.Строки, Ссылающийся, Строка(Ссылающийся) + " - " + ОбъектМетаданныхСсылающегося, 1);
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", Истина);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОставшихсяОбъектов");
	
	УдаленныхОбъектов = КоличествоУдаляемых - КоличествоНеУдаленныхОбъектов;
	
	Если УдаленныхОбъектов = 0 Тогда
		СтрокаРезультатов = НСтр("ru = 'Не удален ни один из объектов, так как в информационной базе существуют ссылки на удаляемые объекты'");
	Иначе
		СтрокаРезультатов = 
			//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удаление помеченных объектов завершено!
							|Удалено объектов: %1.'"),
							Строка(УдаленныхОбъектов));
	КонецЕсли;
	
	Если КоличествоНеУдаленныхОбъектов > 0 Тогда
		СтрокаРезультатов = СтрокаРезультатов + Символы.ПС +
			//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалено объектов: %1.
							|Объекты не удалены для сохранения целостности информационной базы, т.к. на них еще имеются ссылки.
							|Нажмите ОК для просмотра списка оставшихся (не удаленных) объектов.'"),
				Строка(КоличествоНеУдаленныхОбъектов));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СписокПомеченныхНаУдалениеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		Если ТекущиеДанные.Значение <> ТекущиеДанныеЗначение Тогда
			осСсылкиНаПомеченный.Очистить();
			ТекущиеДанныеЗначение = ТекущиеДанные.Значение;
			осПолучитьСсылкиНаСервере(ТекущиеДанные.Значение)
		КонецЕсли;
	Иначе
		осСсылкиНаПомеченный.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура осПолучитьСсылкиНаСервере(Об)
	
	мета = Неопределено;
	
	ссы = осПолучитьСсылки(Об, мета);
	
	Для ё = 0 По ссы.Количество() - 1 Цикл
		//Попытка
		зн = ЗначениеИзСтрокиВнутр(ссы[ё]);
		Если Найти(Строка(зн),"КлючЗаписи.") > 0 Тогда
			предст = "" + зн;
			Если зн.Период <> '00010101' Тогда 
				предст = предст + " - " + зн.Период
			Иначе
				Попытка
					предст = предст + " - " + зн.Пользователь
				Исключение
					Попытка
						предст = предст + " - " + зн.ГруппаДоступа + " - " + зн.ЗначениеДоступа
					Исключение
						Попытка
							предст = предст + " - " + зн.НомерВерсии
						Исключение
							Попытка
								предст = предст + " - " + зн.ВидДоступа + " - " + зн.ЗначениеДоступа
							Исключение
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
			КонецЕсли;
			осСсылкиНаПомеченный.Добавить(зн, предст)
		Иначе
			осСсылкиНаПомеченный.Добавить(зн, "" + зн + " - " + мета[ё])
		КонецЕсли;
		//Исключение
		//	осСсылкиНаПомеченный.Добавить(сс)
		//КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция осПолучитьСсылки(Об, мета) Экспорт
	
	мас = Новый Массив;
	мета = Новый Массив;
	
	иск = Новый Структура("Ссылка");
	иск.Ссылка = Об;
	СтрокиТЧ = осВсеНайденные.НайтиСтроки(иск);
	Для Каждого стр Из СтрокиТЧ Цикл
			мас.Добавить(стр.Данные);
			мета.Добавить(стр.Метаданные)
	КонецЦикла;
	
	иск = Новый Структура("Данные");
	иск.Данные = ЗначениеВСтрокуВнутр(Об);
	СтрокиТЧ = осВсеНайденные.НайтиСтроки(иск);
	Для Каждого стр Из СтрокиТЧ Цикл
		зн = ЗначениеВСтрокуВнутр(стр.Ссылка);
		Если мас.Найти(зн) = Неопределено Тогда
			мас.Добавить(зн);
			мета.Добавить(стр.Ссылка.Метаданные().ПолноеИмя())
		КонецЕсли;
	КонецЦикла;
		
	Возврат мас
	
КонецФункции

&НаКлиенте
Процедура осСсылкиНаПомеченныйВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.осСсылкиНаПомеченный.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ИмяОбработки = Неопределено Тогда	
		АдресХранилища = "";
		Попытка
			Результат = ПоместитьФайл(АдресХранилища, СокрЛП(ИспользуемоеИмяФайла()), , Ложь);
			ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ИмяОбработки = Неопределено Тогда	
	    осПолноеИмяОбработки = "Обработка."+ ИмяОбработки()
	Иначе
	    осПолноеИмяОбработки = "ВнешняяОбработка."+ ИмяОбработки
	КонецЕсли;

КонецПроцедуры

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку( Знач СтрокаПодстановки,
									Знач Параметр1,
									Знач Параметр2 = Неопределено,
									Знач Параметр3 = Неопределено,
									Знач Параметр4 = Неопределено,
									Знач Параметр5 = Неопределено,
									Знач Параметр6 = Неопределено,
									Знач Параметр7 = Неопределено,
									Знач Параметр8 = Неопределено,
									Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

