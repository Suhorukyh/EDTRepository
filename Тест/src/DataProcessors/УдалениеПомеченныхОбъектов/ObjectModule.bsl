//
// Возвращает помеченные на удаление объекты. Возможен отбор по фильтру.
Функция ПолучитьПомеченныеНаУдаление(ВыбранныеОбъектыМетаданных = Неопределено) Экспорт
	
	Если ВыбранныеОбъектыМетаданных = Неопределено Тогда
		// ++ chernav {
		КоллекцииОбъектовМетаданных = новый СписокЗначений;
		КоллекцииОбъектовМетаданных.Добавить("Справочники");
		КоллекцииОбъектовМетаданных.Добавить("Документы");
		КоллекцииОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
		КоллекцииОбъектовМетаданных.Добавить("ПланыСчетов");
		КоллекцииОбъектовМетаданных.Добавить("ПланыВидовРасчета");
		КоллекцииОбъектовМетаданных.Добавить("БизнесПроцессы");
		КоллекцииОбъектовМетаданных.Добавить("Задачи");
		
		ИсключитьОбъекты = новый Массив;
		
		//для каждого КоллекцияОбъектовМетаданных из КоллекцииОбъектовМетаданных цикл
		//	для каждого ЭлементКоллекцииМетаданных из Метаданные[КоллекцияОбъектовМетаданных.Значение] цикл
		//		если не ОбменДаннымиСервер.РазрешеноИзменениеДанных(ЭлементКоллекцииМетаданных) тогда
		//			ИсключитьОбъекты.Добавить(ЭлементКоллекцииМетаданных.ПолноеИмя());
		//		конецесли;
		//	конеццикла;
		//конеццикла;
		// ++ chernav }
		
		МассивПомеченные = НайтиПомеченныеНаУдаление(,, ИсключитьОбъекты);
		
		Результат = Новый Массив;
		Для Каждого ЭлементПомеченный Из МассивПомеченные Цикл
			Если ПравоДоступа("ИнтерактивноеУдалениеПомеченных", ЭлементПомеченный.Метаданные()) Тогда
				Результат.Добавить(ЭлементПомеченный);
			КонецЕсли
		КонецЦикла;
	Иначе
		ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
		ТекстЗапросаКонец = ") КАК Помеченные";

		Запрос = Новый Запрос;
		Текст  = "";
		Для Каждого ЭлементМД Из ВыбранныеОбъектыМетаданных Цикл
			
			Текст = Текст + ?(Текст = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + "
			|	Ссылка
			|ИЗ
			|	" + ЭлементМД + "
			|ГДЕ
			|	ПометкаУдаления = Истина
			| "; 

		КонецЦикла;

		Запрос.Текст = ТекстЗапросаНачало + Текст + ТекстЗапросаКонец;
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	тчВсеНайденные.Очистить();
	ВсеНайденные = НайтиПоСсылкам(Результат);
	Для Каждого стр Из ВсеНайденные Цикл
		стрТЧ = тчВсеНайденные.Добавить();
		стрТЧ.Ссылка = стр.Ссылка;
		стрТЧ.Данные = ЗначениеВСтрокуВнутр(стр.Данные);
		стрТЧ.Метаданные = стр.Метаданные.ПолноеИмя();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция удаления объектов помеченных на удаление
// Параметры:
// Удаляемые - Массив - ссылки на объекты, которые требуется удалить
// ПроверятьСсылочнуюЦелостность - требуется проверка ссылочной целостности
//									если Истина, объекты на которые есть ссыки в ИБ
//									не будут удалены, а будут возвращены как результат функции
//
// Возвращаемое значение
// таблица значений, характеризующая ссылки на удаляемые объекты
//
Функция УдалитьПомеченныеОбъекты(знач Удаляемые, знач ТипыУдаленныхОбъектов) Экспорт
	
	МонопольныйДоступ = Ложь;
	
	Если МонопольныйРежим Тогда
	Попытка
		Если Не МонопольныйРежим() Тогда
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
		МонопольныйДоступ = МонопольныйРежим();
	Исключение
		Возврат ЗаполнитьСтатусОперации(НСтр("ru = 'Не удалось установить монопольный режим'"), Ложь);
	КонецПопытки;
	КонецЕсли;
	
	Попытка
		Найденные = Новый ТаблицаЗначений;
		Если МонопольныйРежим Тогда
		УдалитьОбъекты(Удаляемые, Истина, Найденные);
		// В таблицу Найденные могли попасть записи об объектах информационной базы,
		// связанные с объектами информационной базы, связи с которыми должны фильтроваться
		Удаляемые = Новый Массив;
		////ИсключенияПоискаСсылок = ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок();
		////ИсключенияПоискаСсылок.ЗагрузитьЗначения(ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок());
		//ИсключенияПоискаСсылок.ЗагрузитьЗначения(ПолучитьИсключенияПоискаСсылок());
		СвернутыеПоСсылке = Найденные.Скопировать(, "Ссылка");
		СвернутыеПоСсылке.Свернуть("Ссылка");
		СвернутыеПоСсылке = СвернутыеПоСсылке.ВыгрузитьКолонку("Ссылка");
		Для Каждого ЭлементыПоСсылке Из СвернутыеПоСсылке Цикл
			СвязиПоСсылке = Найденные.НайтиСтроки(Новый Структура("Ссылка", ЭлементыПоСсылке.Ссылка));
			Для Каждого ЭлементСвязь Из СвязиПоСсылке Цикл
				//Если ИсключенияПоискаСсылок.Найти(ЭлементСвязь.Метаданные.ПолноеИмя()) <> Неопределено Тогда
				Если ИсключенияПоискаСсылок.НайтиПоЗначению(ЭлементСвязь.Метаданные.ПолноеИмя()) <> Неопределено Тогда
					Найденные.Удалить(ЭлементСвязь);
				КонецЕсли;
			КонецЦикла;
			Если Найденные.НайтиСтроки(Новый Структура("Ссылка", ЭлементыПоСсылке.Ссылка)).Количество() = 0 Тогда
				// Объект имел только фильтруемые связи - удаляем его
				Удаляемые.Добавить(ЭлементыПоСсылке.Ссылка);
			КонецЕсли;
		КонецЦикла;
		// удаление без контроля ссылочной целостности (проконтролировали самостоятельно)
		УдалитьОбъекты(Удаляемые, Ложь);
		Иначе
			Найденные = НайтиПоСсылкам(Удаляемые);
			
			////ИсключенияПоискаСсылок.ЗагрузитьЗначения(ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок());
			//ИсключенияПоискаСсылок.ЗагрузитьЗначения(ПолучитьИсключенияПоискаСсылок());
			
			ИмяКолСсылки = "Ссылка";
			ИмяКолДанные = "Данные";
			Иск = Новый Структура(ИмяКолСсылки + "," + ИмяКолДанные);
			мета = Неопределено;
			КУдалению = Новый Массив;
			//НеУдаляемые = Новый Массив;
			Для Каждого Помеченный из Удаляемые Цикл     
				Если Не ЕстьСсылкиНаНеУдаляемые(Помеченный, Удаляемые, Найденные) Тогда
					КУдалению.Добавить(Помеченный);
				Иначе
					//НеУдаляемые.Добавить(Помеченный);
					Ссылки = осПолучитьСсылки(Помеченный, мета);
					Для ё = 0 По Ссылки.Количество() - 1 Цикл
						Иск[ИмяКолСсылки] = Помеченный;
						//Иск[ИмяКолДанные] = Ссылки[ё];
						Попытка
						Иск[ИмяКолДанные] = ЗначениеИзСтрокиВнутр(Ссылки[ё]);
						Исключение
						Иск[ИмяКолДанные] = Ссылки[ё];
						КонецПопытки;
						Если Найденные.НайтиСтроки(Иск).Количество() = 0 Тогда
							стр = Найденные.Добавить();
							стр[0] = Помеченный;
							//стр[1] = Ссылки[ё];
							стр[1] = Иск[ИмяКолДанные];
							//стр[2] = Ссылки[ё].Метаданные();
							стр[2] = мета[ё];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Иск = Новый Структура(ИмяКолСсылки);
			НачатьТранзакцию();
			Для Каждого Помеченный из КУдалению Цикл     
				Иск[ИмяКолСсылки] = Помеченный;
				Строки = Найденные.НайтиСтроки(Иск);
				Для ё = -Строки.Количество() По -1 Цикл
					Найденные.Удалить(Строки[-ё - 1])
				КонецЦикла;
			КонецЦикла;
			УдалитьОбъекты(КУдалению, Ложь);
			ЗафиксироватьТранзакцию();
			//Найденные = НайтиПоСсылкам(НеУдаляемые);
			
		КонецЕсли;
	Исключение
		ОшибкаИнфо = ИнформацияОбОшибке();
		//СообщениеОбОшибке = ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеОписанияОшибки(ОшибкаИнфо);
		СообщениеОбОшибке = ПолучитьПредставлениеОписанияОшибки(ОшибкаИнфо);
		УстановитьМонопольныйРежим(Ложь);
		Возврат ЗаполнитьСтатусОперации(СообщениеОбОшибке, Ложь);
	КонецПопытки;
	
	Если МонопольныйДоступ Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ЗаполнитьСтатусОперации(Найденные);
	
КонецФункции

// Возвращает структуру с полями Статус и Значение по переданным параметрам
//
Функция ЗаполнитьСтатусОперации(знач Значение, знач Статус = Истина)
	
	Возврат Новый Структура("Статус, Значение", Статус, Значение);
	
КонецФункции


//Функция ЕстьСсылкиНаНеУдаляемые(Помеченный, Удаляемые, Найденные, Просмотреннные=Неопределено, осВсеСсылки, осВсеДанные, осВсеМетаданные, ИсключенияПоискаСсылок)
//Функция ЕстьСсылкиНаНеУдаляемые(Помеченный, Удаляемые, Найденные, Просмотреннные=Неопределено, ИсключенияПоискаСсылок)
Функция ЕстьСсылкиНаНеУдаляемые(Помеченный, Удаляемые, Найденные, Просмотреннные=Неопределено)
	Перем ё;
	Если Просмотреннные = Неопределено Тогда
		Просмотреннные = Новый Массив;
	КонецЕсли;
	Просмотреннные.Добавить(Помеченный);
	мета = Неопределено;
	Ссылки = осПолучитьСсылки(Помеченный, мета);
	Для ё = 0  по Ссылки.Количество() - 1 Цикл
		Ссылка = Ссылки[ё];
		Попытка
			Ссылка = ЗначениеИзСтрокиВнутр(Ссылка)
		Исключение
		КонецПопытки;
		
		Если ИсключенияПоискаСсылок.НайтиПоЗначению(мета[ё]) <> Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Если Удаляемые.Найти(Ссылка) = Неопределено Тогда
			Возврат Истина
		КонецЕсли;
		
		Если Просмотреннные.Найти(Ссылка) <> Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Если ЕстьСсылкиНаНеУдаляемые(Ссылка, Удаляемые, Найденные, Просмотреннные) Тогда
			Возврат Истина
		КонецЕсли;
		
	КонецЦикла;
	Возврат Ложь
КонецФункции

Функция осПолучитьСсылки(Об, мета) Экспорт
	
	мас = Новый Массив;
	мета = Новый Массив;
	
	иск = Новый Структура("Ссылка");
	иск.Ссылка = Об;
	СтрокиТЧ = тчВсеНайденные.НайтиСтроки(иск);
	Для Каждого стр Из СтрокиТЧ Цикл
			мас.Добавить(стр.Данные);
			мета.Добавить(стр.Метаданные)
	КонецЦикла;
	
	иск = Новый Структура("Данные");
	иск.Данные = ЗначениеВСтрокуВнутр(Об);
	СтрокиТЧ = тчВсеНайденные.НайтиСтроки(иск);
	Для Каждого стр Из СтрокиТЧ Цикл
		зн = ЗначениеВСтрокуВнутр(стр.Ссылка);
		Если мас.Найти(зн) = Неопределено Тогда
			мас.Добавить(зн);
			мета.Добавить(стр.Ссылка.Метаданные().ПолноеИмя())
		КонецЕсли;
	КонецЦикла;
		
	Возврат мас
	
КонецФункции


// Функция ПолучитьИсключенияПоискаСсылок возвращает список имен объектов метаданных,
// которые могут ссылаться на различные объекты метаданных без влияния на бизнес-логику приложения,
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие техногенные
// ссылки должны быть отфильтрованы в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	Попытка
		// ++ chernav {
		// индастри
		Массив.Добавить(Метаданные.РегистрыСведений.ИсторияИзменений.ПолноеИмя());
		Массив.Добавить(Метаданные.РегистрыСведений.НастройкиПользователей.ПолноеИмя());
		Массив.Добавить(Метаданные.РегистрыСведений.НастройкиПользователейРЛС.ПолноеИмя());
		// ++ chernav }
		
		//// Валюты
		//Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
		//// Конец Валюты
		
		// ВерсионированиеОбъектов
		Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
		// Конец ВерсионированиеОбъектов
		
		// Свойства
		//Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
		// Конец Свойства
		
		// УправлениеДоступом
		//Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.ПолноеИмя());
		// Конец УправлениеДоступом
		
		// БизнесПроцессыИЗадачи
		//Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.СписокБизнесПроцессов.ПолноеИмя());
		// Конец БизнесПроцессыИЗадачи
		
		// ФизическиеЛица
		//Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолноеИмя());
		// Конец ФизическиеЛица
		
		// РаботаСФайлами
		//Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
		// Конец РаботаСФайлами
		
		//Массив.Добавить(Метаданные.РегистрыСведений.СостоянияДокументов.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.СвязиДокументов.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ОбщиеРеквизитыДокументов.ПолноеИмя());
		
		//// интеграция
		//Массив.Добавить(Метаданные.РегистрыСведений.ПапкиХраненияФайловОбъектовИнтегрированныхСистем.ПолноеИмя());
		//Массив.Добавить(Метаданные.РегистрыСведений.ИсточникиВнешнихЗадач.ПолноеИмя());
		//// интеграция
		
		//Массив.Добавить(Метаданные.РегистрыСведений.НомераСканированныхФайлов.ПолноеИмя());
	Исключение
	КонецПопытки;
	
	Возврат Массив;
	
КонецФункции // ПолучитьИсключенияПоискаСсылок()


// Получает представление сообщения ошибке на основании Информации об ошибке
// Может вызываться в операторных скобках Попытка ... Исключение ... КонецПопытки;
// для получения сообщения об ошибке.
//
Функция ПолучитьПредставлениеОписанияОшибки(ИнформацияОбОшибке) Экспорт
	
	Возврат ? (ИнформацияОбОшибке.Причина = Неопределено, ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.Причина.Описание);
	
КонецФункции

